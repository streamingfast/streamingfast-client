// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: sf/near/codec/v1/codec.proto

package pbcodec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurveKind int32

const (
	CurveKind_ED25519   CurveKind = 0
	CurveKind_SECP256K1 CurveKind = 1
)

// Enum value maps for CurveKind.
var (
	CurveKind_name = map[int32]string{
		0: "ED25519",
		1: "SECP256K1",
	}
	CurveKind_value = map[string]int32{
		"ED25519":   0,
		"SECP256K1": 1,
	}
)

func (x CurveKind) Enum() *CurveKind {
	p := new(CurveKind)
	*p = x
	return p
}

func (x CurveKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurveKind) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_near_codec_v1_codec_proto_enumTypes[0].Descriptor()
}

func (CurveKind) Type() protoreflect.EnumType {
	return &file_sf_near_codec_v1_codec_proto_enumTypes[0]
}

func (x CurveKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurveKind.Descriptor instead.
func (CurveKind) EnumDescriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{0}
}

type ExecutionMetadata int32

const (
	ExecutionMetadata_ExecutionMetadataV1 ExecutionMetadata = 0
)

// Enum value maps for ExecutionMetadata.
var (
	ExecutionMetadata_name = map[int32]string{
		0: "ExecutionMetadataV1",
	}
	ExecutionMetadata_value = map[string]int32{
		"ExecutionMetadataV1": 0,
	}
)

func (x ExecutionMetadata) Enum() *ExecutionMetadata {
	p := new(ExecutionMetadata)
	*p = x
	return p
}

func (x ExecutionMetadata) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionMetadata) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_near_codec_v1_codec_proto_enumTypes[1].Descriptor()
}

func (ExecutionMetadata) Type() protoreflect.EnumType {
	return &file_sf_near_codec_v1_codec_proto_enumTypes[1]
}

func (x ExecutionMetadata) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionMetadata.Descriptor instead.
func (ExecutionMetadata) EnumDescriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{1}
}

type FunctionCallErrorSer int32

const (
	FunctionCallErrorSer_CompilationError   FunctionCallErrorSer = 0
	FunctionCallErrorSer_LinkError          FunctionCallErrorSer = 1
	FunctionCallErrorSer_MethodResolveError FunctionCallErrorSer = 2
	FunctionCallErrorSer_WasmTrap           FunctionCallErrorSer = 3
	FunctionCallErrorSer_WasmUnknownError   FunctionCallErrorSer = 4
	FunctionCallErrorSer_HostError          FunctionCallErrorSer = 5
	FunctionCallErrorSer__EVMError          FunctionCallErrorSer = 6
	FunctionCallErrorSer_ExecutionError     FunctionCallErrorSer = 7
)

// Enum value maps for FunctionCallErrorSer.
var (
	FunctionCallErrorSer_name = map[int32]string{
		0: "CompilationError",
		1: "LinkError",
		2: "MethodResolveError",
		3: "WasmTrap",
		4: "WasmUnknownError",
		5: "HostError",
		6: "_EVMError",
		7: "ExecutionError",
	}
	FunctionCallErrorSer_value = map[string]int32{
		"CompilationError":   0,
		"LinkError":          1,
		"MethodResolveError": 2,
		"WasmTrap":           3,
		"WasmUnknownError":   4,
		"HostError":          5,
		"_EVMError":          6,
		"ExecutionError":     7,
	}
)

func (x FunctionCallErrorSer) Enum() *FunctionCallErrorSer {
	p := new(FunctionCallErrorSer)
	*p = x
	return p
}

func (x FunctionCallErrorSer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FunctionCallErrorSer) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_near_codec_v1_codec_proto_enumTypes[2].Descriptor()
}

func (FunctionCallErrorSer) Type() protoreflect.EnumType {
	return &file_sf_near_codec_v1_codec_proto_enumTypes[2]
}

func (x FunctionCallErrorSer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FunctionCallErrorSer.Descriptor instead.
func (FunctionCallErrorSer) EnumDescriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{2}
}

type ReceiptValidationError int32

const (
	ReceiptValidationError_InvalidPredecessorId                ReceiptValidationError = 0
	ReceiptValidationError_InvalidReceiverAccountId            ReceiptValidationError = 1
	ReceiptValidationError_InvalidSignerAccountId              ReceiptValidationError = 2
	ReceiptValidationError_InvalidDataReceiverId               ReceiptValidationError = 3
	ReceiptValidationError_ReturnedValueLengthExceeded         ReceiptValidationError = 4
	ReceiptValidationError_NumberInputDataDependenciesExceeded ReceiptValidationError = 5
	ReceiptValidationError_ActionsValidationError              ReceiptValidationError = 6
)

// Enum value maps for ReceiptValidationError.
var (
	ReceiptValidationError_name = map[int32]string{
		0: "InvalidPredecessorId",
		1: "InvalidReceiverAccountId",
		2: "InvalidSignerAccountId",
		3: "InvalidDataReceiverId",
		4: "ReturnedValueLengthExceeded",
		5: "NumberInputDataDependenciesExceeded",
		6: "ActionsValidationError",
	}
	ReceiptValidationError_value = map[string]int32{
		"InvalidPredecessorId":                0,
		"InvalidReceiverAccountId":            1,
		"InvalidSignerAccountId":              2,
		"InvalidDataReceiverId":               3,
		"ReturnedValueLengthExceeded":         4,
		"NumberInputDataDependenciesExceeded": 5,
		"ActionsValidationError":              6,
	}
)

func (x ReceiptValidationError) Enum() *ReceiptValidationError {
	p := new(ReceiptValidationError)
	*p = x
	return p
}

func (x ReceiptValidationError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiptValidationError) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_near_codec_v1_codec_proto_enumTypes[3].Descriptor()
}

func (ReceiptValidationError) Type() protoreflect.EnumType {
	return &file_sf_near_codec_v1_codec_proto_enumTypes[3]
}

func (x ReceiptValidationError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceiptValidationError.Descriptor instead.
func (ReceiptValidationError) EnumDescriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{3}
}

type InvalidTxError int32

const (
	InvalidTxError_InvalidAccessKeyError   InvalidTxError = 0
	InvalidTxError_InvalidSignerId         InvalidTxError = 1
	InvalidTxError_SignerDoesNotExist      InvalidTxError = 2
	InvalidTxError_InvalidNonce            InvalidTxError = 3
	InvalidTxError_NonceTooLarge           InvalidTxError = 4
	InvalidTxError_InvalidReceiverId       InvalidTxError = 5
	InvalidTxError_InvalidSignature        InvalidTxError = 6
	InvalidTxError_NotEnoughBalance        InvalidTxError = 7
	InvalidTxError_LackBalanceForState     InvalidTxError = 8
	InvalidTxError_CostOverflow            InvalidTxError = 9
	InvalidTxError_InvalidChain            InvalidTxError = 10
	InvalidTxError_Expired                 InvalidTxError = 11
	InvalidTxError_ActionsValidation       InvalidTxError = 12
	InvalidTxError_TransactionSizeExceeded InvalidTxError = 13
)

// Enum value maps for InvalidTxError.
var (
	InvalidTxError_name = map[int32]string{
		0:  "InvalidAccessKeyError",
		1:  "InvalidSignerId",
		2:  "SignerDoesNotExist",
		3:  "InvalidNonce",
		4:  "NonceTooLarge",
		5:  "InvalidReceiverId",
		6:  "InvalidSignature",
		7:  "NotEnoughBalance",
		8:  "LackBalanceForState",
		9:  "CostOverflow",
		10: "InvalidChain",
		11: "Expired",
		12: "ActionsValidation",
		13: "TransactionSizeExceeded",
	}
	InvalidTxError_value = map[string]int32{
		"InvalidAccessKeyError":   0,
		"InvalidSignerId":         1,
		"SignerDoesNotExist":      2,
		"InvalidNonce":            3,
		"NonceTooLarge":           4,
		"InvalidReceiverId":       5,
		"InvalidSignature":        6,
		"NotEnoughBalance":        7,
		"LackBalanceForState":     8,
		"CostOverflow":            9,
		"InvalidChain":            10,
		"Expired":                 11,
		"ActionsValidation":       12,
		"TransactionSizeExceeded": 13,
	}
)

func (x InvalidTxError) Enum() *InvalidTxError {
	p := new(InvalidTxError)
	*p = x
	return p
}

func (x InvalidTxError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvalidTxError) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_near_codec_v1_codec_proto_enumTypes[4].Descriptor()
}

func (InvalidTxError) Type() protoreflect.EnumType {
	return &file_sf_near_codec_v1_codec_proto_enumTypes[4]
}

func (x InvalidTxError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvalidTxError.Descriptor instead.
func (InvalidTxError) EnumDescriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{4}
}

type Direction int32

const (
	Direction_left  Direction = 0
	Direction_right Direction = 1
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "left",
		1: "right",
	}
	Direction_value = map[string]int32{
		"left":  0,
		"right": 1,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_near_codec_v1_codec_proto_enumTypes[5].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_sf_near_codec_v1_codec_proto_enumTypes[5]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{5}
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author       string                  `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Header       *BlockHeader            `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	ChunkHeaders []*ChunkHeader          `protobuf:"bytes,3,rep,name=chunk_headers,json=chunkHeaders,proto3" json:"chunk_headers,omitempty"`
	Shards       []*IndexerShard         `protobuf:"bytes,4,rep,name=shards,proto3" json:"shards,omitempty"`
	StateChanges []*StateChangeWithCause `protobuf:"bytes,5,rep,name=state_changes,json=stateChanges,proto3" json:"state_changes,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetChunkHeaders() []*ChunkHeader {
	if x != nil {
		return x.ChunkHeaders
	}
	return nil
}

func (x *Block) GetShards() []*IndexerShard {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *Block) GetStateChanges() []*StateChangeWithCause {
	if x != nil {
		return x.StateChanges
	}
	return nil
}

// HeaderOnlyBlock is a standard [Block] structure where all other fields are
// removed so that hydrating that object from a [Block] bytes payload will
// drastically reduced allocated memory required to hold the full block.
//
// This can be used to unpack a [Block] when only the [BlockHeader] information
// is required and greatly reduced required memory.
type HeaderOnlyBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *BlockHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *HeaderOnlyBlock) Reset() {
	*x = HeaderOnlyBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderOnlyBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderOnlyBlock) ProtoMessage() {}

func (x *HeaderOnlyBlock) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderOnlyBlock.ProtoReflect.Descriptor instead.
func (*HeaderOnlyBlock) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{1}
}

func (x *HeaderOnlyBlock) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type StateChangeWithCause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *StateChangeValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Cause *StateChangeCause `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (x *StateChangeWithCause) Reset() {
	*x = StateChangeWithCause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeWithCause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeWithCause) ProtoMessage() {}

func (x *StateChangeWithCause) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeWithCause.ProtoReflect.Descriptor instead.
func (*StateChangeWithCause) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{2}
}

func (x *StateChangeWithCause) GetValue() *StateChangeValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StateChangeWithCause) GetCause() *StateChangeCause {
	if x != nil {
		return x.Cause
	}
	return nil
}

type StateChangeCause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cause:
	//	*StateChangeCause_NotWritableToDisk_
	//	*StateChangeCause_InitialState_
	//	*StateChangeCause_TransactionProcessing_
	//	*StateChangeCause_ActionReceiptProcessingStarted_
	//	*StateChangeCause_ActionReceiptGasReward_
	//	*StateChangeCause_ReceiptProcessing_
	//	*StateChangeCause_PostponedReceipt_
	//	*StateChangeCause_UpdatedDelayedReceipts_
	//	*StateChangeCause_ValidatorAccountsUpdate_
	//	*StateChangeCause_Migration_
	Cause isStateChangeCause_Cause `protobuf_oneof:"cause"`
}

func (x *StateChangeCause) Reset() {
	*x = StateChangeCause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeCause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeCause) ProtoMessage() {}

func (x *StateChangeCause) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeCause.ProtoReflect.Descriptor instead.
func (*StateChangeCause) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{3}
}

func (m *StateChangeCause) GetCause() isStateChangeCause_Cause {
	if m != nil {
		return m.Cause
	}
	return nil
}

func (x *StateChangeCause) GetNotWritableToDisk() *StateChangeCause_NotWritableToDisk {
	if x, ok := x.GetCause().(*StateChangeCause_NotWritableToDisk_); ok {
		return x.NotWritableToDisk
	}
	return nil
}

func (x *StateChangeCause) GetInitialState() *StateChangeCause_InitialState {
	if x, ok := x.GetCause().(*StateChangeCause_InitialState_); ok {
		return x.InitialState
	}
	return nil
}

func (x *StateChangeCause) GetTransactionProcessing() *StateChangeCause_TransactionProcessing {
	if x, ok := x.GetCause().(*StateChangeCause_TransactionProcessing_); ok {
		return x.TransactionProcessing
	}
	return nil
}

func (x *StateChangeCause) GetActionReceiptProcessingStarted() *StateChangeCause_ActionReceiptProcessingStarted {
	if x, ok := x.GetCause().(*StateChangeCause_ActionReceiptProcessingStarted_); ok {
		return x.ActionReceiptProcessingStarted
	}
	return nil
}

func (x *StateChangeCause) GetActionReceiptGasReward() *StateChangeCause_ActionReceiptGasReward {
	if x, ok := x.GetCause().(*StateChangeCause_ActionReceiptGasReward_); ok {
		return x.ActionReceiptGasReward
	}
	return nil
}

func (x *StateChangeCause) GetReceiptProcessing() *StateChangeCause_ReceiptProcessing {
	if x, ok := x.GetCause().(*StateChangeCause_ReceiptProcessing_); ok {
		return x.ReceiptProcessing
	}
	return nil
}

func (x *StateChangeCause) GetPostponedReceipt() *StateChangeCause_PostponedReceipt {
	if x, ok := x.GetCause().(*StateChangeCause_PostponedReceipt_); ok {
		return x.PostponedReceipt
	}
	return nil
}

func (x *StateChangeCause) GetUpdatedDelayedReceipts() *StateChangeCause_UpdatedDelayedReceipts {
	if x, ok := x.GetCause().(*StateChangeCause_UpdatedDelayedReceipts_); ok {
		return x.UpdatedDelayedReceipts
	}
	return nil
}

func (x *StateChangeCause) GetValidatorAccountsUpdate() *StateChangeCause_ValidatorAccountsUpdate {
	if x, ok := x.GetCause().(*StateChangeCause_ValidatorAccountsUpdate_); ok {
		return x.ValidatorAccountsUpdate
	}
	return nil
}

func (x *StateChangeCause) GetMigration() *StateChangeCause_Migration {
	if x, ok := x.GetCause().(*StateChangeCause_Migration_); ok {
		return x.Migration
	}
	return nil
}

type isStateChangeCause_Cause interface {
	isStateChangeCause_Cause()
}

type StateChangeCause_NotWritableToDisk_ struct {
	NotWritableToDisk *StateChangeCause_NotWritableToDisk `protobuf:"bytes,1,opt,name=not_writable_to_disk,json=notWritableToDisk,proto3,oneof"`
}

type StateChangeCause_InitialState_ struct {
	InitialState *StateChangeCause_InitialState `protobuf:"bytes,2,opt,name=initial_state,json=initialState,proto3,oneof"`
}

type StateChangeCause_TransactionProcessing_ struct {
	TransactionProcessing *StateChangeCause_TransactionProcessing `protobuf:"bytes,3,opt,name=transaction_processing,json=transactionProcessing,proto3,oneof"`
}

type StateChangeCause_ActionReceiptProcessingStarted_ struct {
	ActionReceiptProcessingStarted *StateChangeCause_ActionReceiptProcessingStarted `protobuf:"bytes,4,opt,name=action_receipt_processing_started,json=actionReceiptProcessingStarted,proto3,oneof"`
}

type StateChangeCause_ActionReceiptGasReward_ struct {
	ActionReceiptGasReward *StateChangeCause_ActionReceiptGasReward `protobuf:"bytes,5,opt,name=action_receipt_gas_reward,json=actionReceiptGasReward,proto3,oneof"`
}

type StateChangeCause_ReceiptProcessing_ struct {
	ReceiptProcessing *StateChangeCause_ReceiptProcessing `protobuf:"bytes,6,opt,name=receipt_processing,json=receiptProcessing,proto3,oneof"`
}

type StateChangeCause_PostponedReceipt_ struct {
	PostponedReceipt *StateChangeCause_PostponedReceipt `protobuf:"bytes,7,opt,name=postponed_receipt,json=postponedReceipt,proto3,oneof"`
}

type StateChangeCause_UpdatedDelayedReceipts_ struct {
	UpdatedDelayedReceipts *StateChangeCause_UpdatedDelayedReceipts `protobuf:"bytes,8,opt,name=updated_delayed_receipts,json=updatedDelayedReceipts,proto3,oneof"`
}

type StateChangeCause_ValidatorAccountsUpdate_ struct {
	ValidatorAccountsUpdate *StateChangeCause_ValidatorAccountsUpdate `protobuf:"bytes,9,opt,name=validator_accounts_update,json=validatorAccountsUpdate,proto3,oneof"`
}

type StateChangeCause_Migration_ struct {
	Migration *StateChangeCause_Migration `protobuf:"bytes,10,opt,name=migration,proto3,oneof"`
}

func (*StateChangeCause_NotWritableToDisk_) isStateChangeCause_Cause() {}

func (*StateChangeCause_InitialState_) isStateChangeCause_Cause() {}

func (*StateChangeCause_TransactionProcessing_) isStateChangeCause_Cause() {}

func (*StateChangeCause_ActionReceiptProcessingStarted_) isStateChangeCause_Cause() {}

func (*StateChangeCause_ActionReceiptGasReward_) isStateChangeCause_Cause() {}

func (*StateChangeCause_ReceiptProcessing_) isStateChangeCause_Cause() {}

func (*StateChangeCause_PostponedReceipt_) isStateChangeCause_Cause() {}

func (*StateChangeCause_UpdatedDelayedReceipts_) isStateChangeCause_Cause() {}

func (*StateChangeCause_ValidatorAccountsUpdate_) isStateChangeCause_Cause() {}

func (*StateChangeCause_Migration_) isStateChangeCause_Cause() {}

type StateChangeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*StateChangeValue_AccountUpdate_
	//	*StateChangeValue_AccountDeletion_
	//	*StateChangeValue_AccessKeyUpdate_
	//	*StateChangeValue_AccessKeyDeletion_
	//	*StateChangeValue_DataUpdate_
	//	*StateChangeValue_DataDeletion_
	//	*StateChangeValue_ContractCodeUpdate_
	//	*StateChangeValue_ContractDeletion
	Value isStateChangeValue_Value `protobuf_oneof:"value"`
}

func (x *StateChangeValue) Reset() {
	*x = StateChangeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeValue) ProtoMessage() {}

func (x *StateChangeValue) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeValue.ProtoReflect.Descriptor instead.
func (*StateChangeValue) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{4}
}

func (m *StateChangeValue) GetValue() isStateChangeValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *StateChangeValue) GetAccountUpdate() *StateChangeValue_AccountUpdate {
	if x, ok := x.GetValue().(*StateChangeValue_AccountUpdate_); ok {
		return x.AccountUpdate
	}
	return nil
}

func (x *StateChangeValue) GetAccountDeletion() *StateChangeValue_AccountDeletion {
	if x, ok := x.GetValue().(*StateChangeValue_AccountDeletion_); ok {
		return x.AccountDeletion
	}
	return nil
}

func (x *StateChangeValue) GetAccessKeyUpdate() *StateChangeValue_AccessKeyUpdate {
	if x, ok := x.GetValue().(*StateChangeValue_AccessKeyUpdate_); ok {
		return x.AccessKeyUpdate
	}
	return nil
}

func (x *StateChangeValue) GetAccessKeyDeletion() *StateChangeValue_AccessKeyDeletion {
	if x, ok := x.GetValue().(*StateChangeValue_AccessKeyDeletion_); ok {
		return x.AccessKeyDeletion
	}
	return nil
}

func (x *StateChangeValue) GetDataUpdate() *StateChangeValue_DataUpdate {
	if x, ok := x.GetValue().(*StateChangeValue_DataUpdate_); ok {
		return x.DataUpdate
	}
	return nil
}

func (x *StateChangeValue) GetDataDeletion() *StateChangeValue_DataDeletion {
	if x, ok := x.GetValue().(*StateChangeValue_DataDeletion_); ok {
		return x.DataDeletion
	}
	return nil
}

func (x *StateChangeValue) GetContractCodeUpdate() *StateChangeValue_ContractCodeUpdate {
	if x, ok := x.GetValue().(*StateChangeValue_ContractCodeUpdate_); ok {
		return x.ContractCodeUpdate
	}
	return nil
}

func (x *StateChangeValue) GetContractDeletion() *StateChangeValue_ContractCodeDeletion {
	if x, ok := x.GetValue().(*StateChangeValue_ContractDeletion); ok {
		return x.ContractDeletion
	}
	return nil
}

type isStateChangeValue_Value interface {
	isStateChangeValue_Value()
}

type StateChangeValue_AccountUpdate_ struct {
	AccountUpdate *StateChangeValue_AccountUpdate `protobuf:"bytes,1,opt,name=account_update,json=accountUpdate,proto3,oneof"`
}

type StateChangeValue_AccountDeletion_ struct {
	AccountDeletion *StateChangeValue_AccountDeletion `protobuf:"bytes,2,opt,name=account_deletion,json=accountDeletion,proto3,oneof"`
}

type StateChangeValue_AccessKeyUpdate_ struct {
	AccessKeyUpdate *StateChangeValue_AccessKeyUpdate `protobuf:"bytes,3,opt,name=access_key_update,json=accessKeyUpdate,proto3,oneof"`
}

type StateChangeValue_AccessKeyDeletion_ struct {
	AccessKeyDeletion *StateChangeValue_AccessKeyDeletion `protobuf:"bytes,4,opt,name=access_key_deletion,json=accessKeyDeletion,proto3,oneof"`
}

type StateChangeValue_DataUpdate_ struct {
	DataUpdate *StateChangeValue_DataUpdate `protobuf:"bytes,5,opt,name=data_update,json=dataUpdate,proto3,oneof"`
}

type StateChangeValue_DataDeletion_ struct {
	DataDeletion *StateChangeValue_DataDeletion `protobuf:"bytes,6,opt,name=data_deletion,json=dataDeletion,proto3,oneof"`
}

type StateChangeValue_ContractCodeUpdate_ struct {
	ContractCodeUpdate *StateChangeValue_ContractCodeUpdate `protobuf:"bytes,7,opt,name=contract_code_update,json=contractCodeUpdate,proto3,oneof"`
}

type StateChangeValue_ContractDeletion struct {
	ContractDeletion *StateChangeValue_ContractCodeDeletion `protobuf:"bytes,8,opt,name=contract_deletion,json=contractDeletion,proto3,oneof"`
}

func (*StateChangeValue_AccountUpdate_) isStateChangeValue_Value() {}

func (*StateChangeValue_AccountDeletion_) isStateChangeValue_Value() {}

func (*StateChangeValue_AccessKeyUpdate_) isStateChangeValue_Value() {}

func (*StateChangeValue_AccessKeyDeletion_) isStateChangeValue_Value() {}

func (*StateChangeValue_DataUpdate_) isStateChangeValue_Value() {}

func (*StateChangeValue_DataDeletion_) isStateChangeValue_Value() {}

func (*StateChangeValue_ContractCodeUpdate_) isStateChangeValue_Value() {}

func (*StateChangeValue_ContractDeletion) isStateChangeValue_Value() {}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount       *BigInt     `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Locked       *BigInt     `protobuf:"bytes,2,opt,name=locked,proto3" json:"locked,omitempty"`
	CodeHash     *CryptoHash `protobuf:"bytes,3,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	StorageUsage uint64      `protobuf:"varint,4,opt,name=storage_usage,json=storageUsage,proto3" json:"storage_usage,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{5}
}

func (x *Account) GetAmount() *BigInt {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Account) GetLocked() *BigInt {
	if x != nil {
		return x.Locked
	}
	return nil
}

func (x *Account) GetCodeHash() *CryptoHash {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

func (x *Account) GetStorageUsage() uint64 {
	if x != nil {
		return x.StorageUsage
	}
	return 0
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height                 uint64              `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	PrevHeight             uint64              `protobuf:"varint,2,opt,name=prev_height,json=prevHeight,proto3" json:"prev_height,omitempty"`
	EpochId                *CryptoHash         `protobuf:"bytes,3,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	NextEpochId            *CryptoHash         `protobuf:"bytes,4,opt,name=next_epoch_id,json=nextEpochId,proto3" json:"next_epoch_id,omitempty"`
	Hash                   *CryptoHash         `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	PrevHash               *CryptoHash         `protobuf:"bytes,6,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	PrevStateRoot          *CryptoHash         `protobuf:"bytes,7,opt,name=prev_state_root,json=prevStateRoot,proto3" json:"prev_state_root,omitempty"`
	ChunkReceiptsRoot      *CryptoHash         `protobuf:"bytes,8,opt,name=chunk_receipts_root,json=chunkReceiptsRoot,proto3" json:"chunk_receipts_root,omitempty"`
	ChunkHeadersRoot       *CryptoHash         `protobuf:"bytes,9,opt,name=chunk_headers_root,json=chunkHeadersRoot,proto3" json:"chunk_headers_root,omitempty"`
	ChunkTxRoot            *CryptoHash         `protobuf:"bytes,10,opt,name=chunk_tx_root,json=chunkTxRoot,proto3" json:"chunk_tx_root,omitempty"`
	OutcomeRoot            *CryptoHash         `protobuf:"bytes,11,opt,name=outcome_root,json=outcomeRoot,proto3" json:"outcome_root,omitempty"`
	ChunksIncluded         uint64              `protobuf:"varint,12,opt,name=chunks_included,json=chunksIncluded,proto3" json:"chunks_included,omitempty"`
	ChallengesRoot         *CryptoHash         `protobuf:"bytes,13,opt,name=challenges_root,json=challengesRoot,proto3" json:"challenges_root,omitempty"`
	Timestamp              uint64              `protobuf:"varint,14,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TimestampNanosec       uint64              `protobuf:"varint,15,opt,name=timestamp_nanosec,json=timestampNanosec,proto3" json:"timestamp_nanosec,omitempty"`
	RandomValue            *CryptoHash         `protobuf:"bytes,16,opt,name=random_value,json=randomValue,proto3" json:"random_value,omitempty"`
	ValidatorProposals     []*ValidatorStake   `protobuf:"bytes,17,rep,name=validator_proposals,json=validatorProposals,proto3" json:"validator_proposals,omitempty"`
	ChunkMask              []bool              `protobuf:"varint,18,rep,packed,name=chunk_mask,json=chunkMask,proto3" json:"chunk_mask,omitempty"`
	GasPrice               *BigInt             `protobuf:"bytes,19,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	BlockOrdinal           uint64              `protobuf:"varint,20,opt,name=block_ordinal,json=blockOrdinal,proto3" json:"block_ordinal,omitempty"`
	TotalSupply            *BigInt             `protobuf:"bytes,21,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	ChallengesResult       []*SlashedValidator `protobuf:"bytes,22,rep,name=challenges_result,json=challengesResult,proto3" json:"challenges_result,omitempty"`
	LastFinalBlockHeight   uint64              `protobuf:"varint,23,opt,name=last_final_block_height,json=lastFinalBlockHeight,proto3" json:"last_final_block_height,omitempty"`
	LastFinalBlock         *CryptoHash         `protobuf:"bytes,24,opt,name=last_final_block,json=lastFinalBlock,proto3" json:"last_final_block,omitempty"`
	LastDsFinalBlockHeight uint64              `protobuf:"varint,25,opt,name=last_ds_final_block_height,json=lastDsFinalBlockHeight,proto3" json:"last_ds_final_block_height,omitempty"`
	LastDsFinalBlock       *CryptoHash         `protobuf:"bytes,26,opt,name=last_ds_final_block,json=lastDsFinalBlock,proto3" json:"last_ds_final_block,omitempty"`
	NextBpHash             *CryptoHash         `protobuf:"bytes,27,opt,name=next_bp_hash,json=nextBpHash,proto3" json:"next_bp_hash,omitempty"`
	BlockMerkleRoot        *CryptoHash         `protobuf:"bytes,28,opt,name=block_merkle_root,json=blockMerkleRoot,proto3" json:"block_merkle_root,omitempty"`
	EpochSyncDataHash      []byte              `protobuf:"bytes,29,opt,name=epoch_sync_data_hash,json=epochSyncDataHash,proto3" json:"epoch_sync_data_hash,omitempty"`
	Approvals              []*Signature        `protobuf:"bytes,30,rep,name=approvals,proto3" json:"approvals,omitempty"`
	Signature              *Signature          `protobuf:"bytes,31,opt,name=signature,proto3" json:"signature,omitempty"`
	LatestProtocolVersion  uint32              `protobuf:"varint,32,opt,name=latest_protocol_version,json=latestProtocolVersion,proto3" json:"latest_protocol_version,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{6}
}

func (x *BlockHeader) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockHeader) GetPrevHeight() uint64 {
	if x != nil {
		return x.PrevHeight
	}
	return 0
}

func (x *BlockHeader) GetEpochId() *CryptoHash {
	if x != nil {
		return x.EpochId
	}
	return nil
}

func (x *BlockHeader) GetNextEpochId() *CryptoHash {
	if x != nil {
		return x.NextEpochId
	}
	return nil
}

func (x *BlockHeader) GetHash() *CryptoHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockHeader) GetPrevHash() *CryptoHash {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *BlockHeader) GetPrevStateRoot() *CryptoHash {
	if x != nil {
		return x.PrevStateRoot
	}
	return nil
}

func (x *BlockHeader) GetChunkReceiptsRoot() *CryptoHash {
	if x != nil {
		return x.ChunkReceiptsRoot
	}
	return nil
}

func (x *BlockHeader) GetChunkHeadersRoot() *CryptoHash {
	if x != nil {
		return x.ChunkHeadersRoot
	}
	return nil
}

func (x *BlockHeader) GetChunkTxRoot() *CryptoHash {
	if x != nil {
		return x.ChunkTxRoot
	}
	return nil
}

func (x *BlockHeader) GetOutcomeRoot() *CryptoHash {
	if x != nil {
		return x.OutcomeRoot
	}
	return nil
}

func (x *BlockHeader) GetChunksIncluded() uint64 {
	if x != nil {
		return x.ChunksIncluded
	}
	return 0
}

func (x *BlockHeader) GetChallengesRoot() *CryptoHash {
	if x != nil {
		return x.ChallengesRoot
	}
	return nil
}

func (x *BlockHeader) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockHeader) GetTimestampNanosec() uint64 {
	if x != nil {
		return x.TimestampNanosec
	}
	return 0
}

func (x *BlockHeader) GetRandomValue() *CryptoHash {
	if x != nil {
		return x.RandomValue
	}
	return nil
}

func (x *BlockHeader) GetValidatorProposals() []*ValidatorStake {
	if x != nil {
		return x.ValidatorProposals
	}
	return nil
}

func (x *BlockHeader) GetChunkMask() []bool {
	if x != nil {
		return x.ChunkMask
	}
	return nil
}

func (x *BlockHeader) GetGasPrice() *BigInt {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *BlockHeader) GetBlockOrdinal() uint64 {
	if x != nil {
		return x.BlockOrdinal
	}
	return 0
}

func (x *BlockHeader) GetTotalSupply() *BigInt {
	if x != nil {
		return x.TotalSupply
	}
	return nil
}

func (x *BlockHeader) GetChallengesResult() []*SlashedValidator {
	if x != nil {
		return x.ChallengesResult
	}
	return nil
}

func (x *BlockHeader) GetLastFinalBlockHeight() uint64 {
	if x != nil {
		return x.LastFinalBlockHeight
	}
	return 0
}

func (x *BlockHeader) GetLastFinalBlock() *CryptoHash {
	if x != nil {
		return x.LastFinalBlock
	}
	return nil
}

func (x *BlockHeader) GetLastDsFinalBlockHeight() uint64 {
	if x != nil {
		return x.LastDsFinalBlockHeight
	}
	return 0
}

func (x *BlockHeader) GetLastDsFinalBlock() *CryptoHash {
	if x != nil {
		return x.LastDsFinalBlock
	}
	return nil
}

func (x *BlockHeader) GetNextBpHash() *CryptoHash {
	if x != nil {
		return x.NextBpHash
	}
	return nil
}

func (x *BlockHeader) GetBlockMerkleRoot() *CryptoHash {
	if x != nil {
		return x.BlockMerkleRoot
	}
	return nil
}

func (x *BlockHeader) GetEpochSyncDataHash() []byte {
	if x != nil {
		return x.EpochSyncDataHash
	}
	return nil
}

func (x *BlockHeader) GetApprovals() []*Signature {
	if x != nil {
		return x.Approvals
	}
	return nil
}

func (x *BlockHeader) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *BlockHeader) GetLatestProtocolVersion() uint32 {
	if x != nil {
		return x.LatestProtocolVersion
	}
	return 0
}

type BigInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *BigInt) Reset() {
	*x = BigInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigInt) ProtoMessage() {}

func (x *BigInt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigInt.ProtoReflect.Descriptor instead.
func (*BigInt) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{7}
}

func (x *BigInt) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type CryptoHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *CryptoHash) Reset() {
	*x = CryptoHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoHash) ProtoMessage() {}

func (x *CryptoHash) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoHash.ProtoReflect.Descriptor instead.
func (*CryptoHash) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{8}
}

func (x *CryptoHash) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  CurveKind `protobuf:"varint,1,opt,name=type,proto3,enum=sf.near.codec.v1.CurveKind" json:"type,omitempty"`
	Bytes []byte    `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{9}
}

func (x *Signature) GetType() CurveKind {
	if x != nil {
		return x.Type
	}
	return CurveKind_ED25519
}

func (x *Signature) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  CurveKind `protobuf:"varint,1,opt,name=type,proto3,enum=sf.near.codec.v1.CurveKind" json:"type,omitempty"`
	Bytes []byte    `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{10}
}

func (x *PublicKey) GetType() CurveKind {
	if x != nil {
		return x.Type
	}
	return CurveKind_ED25519
}

func (x *PublicKey) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type ValidatorStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string     `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PublicKey *PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Stake     *BigInt    `protobuf:"bytes,3,opt,name=stake,proto3" json:"stake,omitempty"`
}

func (x *ValidatorStake) Reset() {
	*x = ValidatorStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorStake) ProtoMessage() {}

func (x *ValidatorStake) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorStake.ProtoReflect.Descriptor instead.
func (*ValidatorStake) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{11}
}

func (x *ValidatorStake) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ValidatorStake) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ValidatorStake) GetStake() *BigInt {
	if x != nil {
		return x.Stake
	}
	return nil
}

type SlashedValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	IsDoubleSign bool   `protobuf:"varint,2,opt,name=is_double_sign,json=isDoubleSign,proto3" json:"is_double_sign,omitempty"`
}

func (x *SlashedValidator) Reset() {
	*x = SlashedValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlashedValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashedValidator) ProtoMessage() {}

func (x *SlashedValidator) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlashedValidator.ProtoReflect.Descriptor instead.
func (*SlashedValidator) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{12}
}

func (x *SlashedValidator) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SlashedValidator) GetIsDoubleSign() bool {
	if x != nil {
		return x.IsDoubleSign
	}
	return false
}

type ChunkHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkHash            []byte            `protobuf:"bytes,1,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
	PrevBlockHash        []byte            `protobuf:"bytes,2,opt,name=prev_block_hash,json=prevBlockHash,proto3" json:"prev_block_hash,omitempty"`
	OutcomeRoot          []byte            `protobuf:"bytes,3,opt,name=outcome_root,json=outcomeRoot,proto3" json:"outcome_root,omitempty"`
	PrevStateRoot        []byte            `protobuf:"bytes,4,opt,name=prev_state_root,json=prevStateRoot,proto3" json:"prev_state_root,omitempty"`
	EncodedMerkleRoot    []byte            `protobuf:"bytes,5,opt,name=encoded_merkle_root,json=encodedMerkleRoot,proto3" json:"encoded_merkle_root,omitempty"`
	EncodedLength        uint64            `protobuf:"varint,6,opt,name=encoded_length,json=encodedLength,proto3" json:"encoded_length,omitempty"`
	HeightCreated        uint64            `protobuf:"varint,7,opt,name=height_created,json=heightCreated,proto3" json:"height_created,omitempty"`
	HeightIncluded       uint64            `protobuf:"varint,8,opt,name=height_included,json=heightIncluded,proto3" json:"height_included,omitempty"`
	ShardId              uint64            `protobuf:"varint,9,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	GasUsed              uint64            `protobuf:"varint,10,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	GasLimit             uint64            `protobuf:"varint,11,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	ValidatorReward      *BigInt           `protobuf:"bytes,12,opt,name=validator_reward,json=validatorReward,proto3" json:"validator_reward,omitempty"`
	BalanceBurnt         *BigInt           `protobuf:"bytes,13,opt,name=balance_burnt,json=balanceBurnt,proto3" json:"balance_burnt,omitempty"`
	OutgoingReceiptsRoot []byte            `protobuf:"bytes,14,opt,name=outgoing_receipts_root,json=outgoingReceiptsRoot,proto3" json:"outgoing_receipts_root,omitempty"`
	TxRoot               []byte            `protobuf:"bytes,15,opt,name=tx_root,json=txRoot,proto3" json:"tx_root,omitempty"`
	ValidatorProposals   []*ValidatorStake `protobuf:"bytes,16,rep,name=validator_proposals,json=validatorProposals,proto3" json:"validator_proposals,omitempty"`
	Signature            *Signature        `protobuf:"bytes,17,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ChunkHeader) Reset() {
	*x = ChunkHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkHeader) ProtoMessage() {}

func (x *ChunkHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkHeader.ProtoReflect.Descriptor instead.
func (*ChunkHeader) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{13}
}

func (x *ChunkHeader) GetChunkHash() []byte {
	if x != nil {
		return x.ChunkHash
	}
	return nil
}

func (x *ChunkHeader) GetPrevBlockHash() []byte {
	if x != nil {
		return x.PrevBlockHash
	}
	return nil
}

func (x *ChunkHeader) GetOutcomeRoot() []byte {
	if x != nil {
		return x.OutcomeRoot
	}
	return nil
}

func (x *ChunkHeader) GetPrevStateRoot() []byte {
	if x != nil {
		return x.PrevStateRoot
	}
	return nil
}

func (x *ChunkHeader) GetEncodedMerkleRoot() []byte {
	if x != nil {
		return x.EncodedMerkleRoot
	}
	return nil
}

func (x *ChunkHeader) GetEncodedLength() uint64 {
	if x != nil {
		return x.EncodedLength
	}
	return 0
}

func (x *ChunkHeader) GetHeightCreated() uint64 {
	if x != nil {
		return x.HeightCreated
	}
	return 0
}

func (x *ChunkHeader) GetHeightIncluded() uint64 {
	if x != nil {
		return x.HeightIncluded
	}
	return 0
}

func (x *ChunkHeader) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *ChunkHeader) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ChunkHeader) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ChunkHeader) GetValidatorReward() *BigInt {
	if x != nil {
		return x.ValidatorReward
	}
	return nil
}

func (x *ChunkHeader) GetBalanceBurnt() *BigInt {
	if x != nil {
		return x.BalanceBurnt
	}
	return nil
}

func (x *ChunkHeader) GetOutgoingReceiptsRoot() []byte {
	if x != nil {
		return x.OutgoingReceiptsRoot
	}
	return nil
}

func (x *ChunkHeader) GetTxRoot() []byte {
	if x != nil {
		return x.TxRoot
	}
	return nil
}

func (x *ChunkHeader) GetValidatorProposals() []*ValidatorStake {
	if x != nil {
		return x.ValidatorProposals
	}
	return nil
}

func (x *ChunkHeader) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type IndexerShard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId                  uint64                                `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Chunk                    *IndexerChunk                         `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	ReceiptExecutionOutcomes []*IndexerExecutionOutcomeWithReceipt `protobuf:"bytes,3,rep,name=receipt_execution_outcomes,json=receiptExecutionOutcomes,proto3" json:"receipt_execution_outcomes,omitempty"`
}

func (x *IndexerShard) Reset() {
	*x = IndexerShard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexerShard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexerShard) ProtoMessage() {}

func (x *IndexerShard) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexerShard.ProtoReflect.Descriptor instead.
func (*IndexerShard) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{14}
}

func (x *IndexerShard) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *IndexerShard) GetChunk() *IndexerChunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *IndexerShard) GetReceiptExecutionOutcomes() []*IndexerExecutionOutcomeWithReceipt {
	if x != nil {
		return x.ReceiptExecutionOutcomes
	}
	return nil
}

type IndexerExecutionOutcomeWithReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionOutcome *ExecutionOutcomeWithId `protobuf:"bytes,1,opt,name=execution_outcome,json=executionOutcome,proto3" json:"execution_outcome,omitempty"`
	Receipt          *Receipt                `protobuf:"bytes,2,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *IndexerExecutionOutcomeWithReceipt) Reset() {
	*x = IndexerExecutionOutcomeWithReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexerExecutionOutcomeWithReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexerExecutionOutcomeWithReceipt) ProtoMessage() {}

func (x *IndexerExecutionOutcomeWithReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexerExecutionOutcomeWithReceipt.ProtoReflect.Descriptor instead.
func (*IndexerExecutionOutcomeWithReceipt) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{15}
}

func (x *IndexerExecutionOutcomeWithReceipt) GetExecutionOutcome() *ExecutionOutcomeWithId {
	if x != nil {
		return x.ExecutionOutcome
	}
	return nil
}

func (x *IndexerExecutionOutcomeWithReceipt) GetReceipt() *Receipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type IndexerChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author       string                           `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Header       *ChunkHeader                     `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*IndexerTransactionWithOutcome `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Receipts     []*Receipt                       `protobuf:"bytes,4,rep,name=receipts,proto3" json:"receipts,omitempty"`
}

func (x *IndexerChunk) Reset() {
	*x = IndexerChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexerChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexerChunk) ProtoMessage() {}

func (x *IndexerChunk) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexerChunk.ProtoReflect.Descriptor instead.
func (*IndexerChunk) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{16}
}

func (x *IndexerChunk) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *IndexerChunk) GetHeader() *ChunkHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *IndexerChunk) GetTransactions() []*IndexerTransactionWithOutcome {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *IndexerChunk) GetReceipts() []*Receipt {
	if x != nil {
		return x.Receipts
	}
	return nil
}

type IndexerTransactionWithOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *SignedTransaction                          `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Outcome     *IndexerExecutionOutcomeWithOptionalReceipt `protobuf:"bytes,2,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *IndexerTransactionWithOutcome) Reset() {
	*x = IndexerTransactionWithOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexerTransactionWithOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexerTransactionWithOutcome) ProtoMessage() {}

func (x *IndexerTransactionWithOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexerTransactionWithOutcome.ProtoReflect.Descriptor instead.
func (*IndexerTransactionWithOutcome) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{17}
}

func (x *IndexerTransactionWithOutcome) GetTransaction() *SignedTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *IndexerTransactionWithOutcome) GetOutcome() *IndexerExecutionOutcomeWithOptionalReceipt {
	if x != nil {
		return x.Outcome
	}
	return nil
}

type SignedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerId   string      `protobuf:"bytes,1,opt,name=signer_id,json=signerId,proto3" json:"signer_id,omitempty"`
	PublicKey  *PublicKey  `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Nonce      uint64      `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ReceiverId string      `protobuf:"bytes,4,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	Actions    []*Action   `protobuf:"bytes,5,rep,name=actions,proto3" json:"actions,omitempty"`
	Signature  *Signature  `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Hash       *CryptoHash `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *SignedTransaction) Reset() {
	*x = SignedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTransaction) ProtoMessage() {}

func (x *SignedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTransaction.ProtoReflect.Descriptor instead.
func (*SignedTransaction) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{18}
}

func (x *SignedTransaction) GetSignerId() string {
	if x != nil {
		return x.SignerId
	}
	return ""
}

func (x *SignedTransaction) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SignedTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SignedTransaction) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

func (x *SignedTransaction) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *SignedTransaction) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedTransaction) GetHash() *CryptoHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

type IndexerExecutionOutcomeWithOptionalReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionOutcome *ExecutionOutcomeWithId `protobuf:"bytes,1,opt,name=execution_outcome,json=executionOutcome,proto3" json:"execution_outcome,omitempty"`
	Receipt          *Receipt                `protobuf:"bytes,2,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *IndexerExecutionOutcomeWithOptionalReceipt) Reset() {
	*x = IndexerExecutionOutcomeWithOptionalReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexerExecutionOutcomeWithOptionalReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexerExecutionOutcomeWithOptionalReceipt) ProtoMessage() {}

func (x *IndexerExecutionOutcomeWithOptionalReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexerExecutionOutcomeWithOptionalReceipt.ProtoReflect.Descriptor instead.
func (*IndexerExecutionOutcomeWithOptionalReceipt) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{19}
}

func (x *IndexerExecutionOutcomeWithOptionalReceipt) GetExecutionOutcome() *ExecutionOutcomeWithId {
	if x != nil {
		return x.ExecutionOutcome
	}
	return nil
}

func (x *IndexerExecutionOutcomeWithOptionalReceipt) GetReceipt() *Receipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredecessorId string      `protobuf:"bytes,1,opt,name=predecessor_id,json=predecessorId,proto3" json:"predecessor_id,omitempty"`
	ReceiverId    string      `protobuf:"bytes,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	ReceiptId     *CryptoHash `protobuf:"bytes,3,opt,name=receipt_id,json=receiptId,proto3" json:"receipt_id,omitempty"`
	// Types that are assignable to Receipt:
	//	*Receipt_Action
	//	*Receipt_Data
	Receipt isReceipt_Receipt `protobuf_oneof:"receipt"`
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{20}
}

func (x *Receipt) GetPredecessorId() string {
	if x != nil {
		return x.PredecessorId
	}
	return ""
}

func (x *Receipt) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

func (x *Receipt) GetReceiptId() *CryptoHash {
	if x != nil {
		return x.ReceiptId
	}
	return nil
}

func (m *Receipt) GetReceipt() isReceipt_Receipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (x *Receipt) GetAction() *ReceiptAction {
	if x, ok := x.GetReceipt().(*Receipt_Action); ok {
		return x.Action
	}
	return nil
}

func (x *Receipt) GetData() *ReceiptData {
	if x, ok := x.GetReceipt().(*Receipt_Data); ok {
		return x.Data
	}
	return nil
}

type isReceipt_Receipt interface {
	isReceipt_Receipt()
}

type Receipt_Action struct {
	Action *ReceiptAction `protobuf:"bytes,10,opt,name=action,proto3,oneof"`
}

type Receipt_Data struct {
	Data *ReceiptData `protobuf:"bytes,11,opt,name=data,proto3,oneof"`
}

func (*Receipt_Action) isReceipt_Receipt() {}

func (*Receipt_Data) isReceipt_Receipt() {}

type ReceiptData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataId *CryptoHash `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	Data   []byte      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReceiptData) Reset() {
	*x = ReceiptData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptData) ProtoMessage() {}

func (x *ReceiptData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptData.ProtoReflect.Descriptor instead.
func (*ReceiptData) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{21}
}

func (x *ReceiptData) GetDataId() *CryptoHash {
	if x != nil {
		return x.DataId
	}
	return nil
}

func (x *ReceiptData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReceiptAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerId            string          `protobuf:"bytes,1,opt,name=signer_id,json=signerId,proto3" json:"signer_id,omitempty"`
	SignerPublicKey     *PublicKey      `protobuf:"bytes,2,opt,name=signer_public_key,json=signerPublicKey,proto3" json:"signer_public_key,omitempty"`
	GasPrice            *BigInt         `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	OutputDataReceivers []*DataReceiver `protobuf:"bytes,4,rep,name=output_data_receivers,json=outputDataReceivers,proto3" json:"output_data_receivers,omitempty"`
	InputDataIds        []*CryptoHash   `protobuf:"bytes,5,rep,name=input_data_ids,json=inputDataIds,proto3" json:"input_data_ids,omitempty"`
	Actions             []*Action       `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *ReceiptAction) Reset() {
	*x = ReceiptAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptAction) ProtoMessage() {}

func (x *ReceiptAction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptAction.ProtoReflect.Descriptor instead.
func (*ReceiptAction) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{22}
}

func (x *ReceiptAction) GetSignerId() string {
	if x != nil {
		return x.SignerId
	}
	return ""
}

func (x *ReceiptAction) GetSignerPublicKey() *PublicKey {
	if x != nil {
		return x.SignerPublicKey
	}
	return nil
}

func (x *ReceiptAction) GetGasPrice() *BigInt {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *ReceiptAction) GetOutputDataReceivers() []*DataReceiver {
	if x != nil {
		return x.OutputDataReceivers
	}
	return nil
}

func (x *ReceiptAction) GetInputDataIds() []*CryptoHash {
	if x != nil {
		return x.InputDataIds
	}
	return nil
}

func (x *ReceiptAction) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type DataReceiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataId     *CryptoHash `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	ReceiverId string      `protobuf:"bytes,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
}

func (x *DataReceiver) Reset() {
	*x = DataReceiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataReceiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataReceiver) ProtoMessage() {}

func (x *DataReceiver) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataReceiver.ProtoReflect.Descriptor instead.
func (*DataReceiver) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{23}
}

func (x *DataReceiver) GetDataId() *CryptoHash {
	if x != nil {
		return x.DataId
	}
	return nil
}

func (x *DataReceiver) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

type ExecutionOutcomeWithId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof     *MerklePath       `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockHash *CryptoHash       `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Id        *CryptoHash       `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Outcome   *ExecutionOutcome `protobuf:"bytes,4,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *ExecutionOutcomeWithId) Reset() {
	*x = ExecutionOutcomeWithId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionOutcomeWithId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionOutcomeWithId) ProtoMessage() {}

func (x *ExecutionOutcomeWithId) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionOutcomeWithId.ProtoReflect.Descriptor instead.
func (*ExecutionOutcomeWithId) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{24}
}

func (x *ExecutionOutcomeWithId) GetProof() *MerklePath {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *ExecutionOutcomeWithId) GetBlockHash() *CryptoHash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ExecutionOutcomeWithId) GetId() *CryptoHash {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExecutionOutcomeWithId) GetOutcome() *ExecutionOutcome {
	if x != nil {
		return x.Outcome
	}
	return nil
}

type ExecutionOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs        []string      `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	ReceiptIds  []*CryptoHash `protobuf:"bytes,2,rep,name=receipt_ids,json=receiptIds,proto3" json:"receipt_ids,omitempty"`
	GasBurnt    uint64        `protobuf:"varint,3,opt,name=gas_burnt,json=gasBurnt,proto3" json:"gas_burnt,omitempty"`
	TokensBurnt *BigInt       `protobuf:"bytes,4,opt,name=tokens_burnt,json=tokensBurnt,proto3" json:"tokens_burnt,omitempty"`
	ExecutorId  string        `protobuf:"bytes,5,opt,name=executor_id,json=executorId,proto3" json:"executor_id,omitempty"`
	// Types that are assignable to Status:
	//	*ExecutionOutcome_Unknown
	//	*ExecutionOutcome_Failure
	//	*ExecutionOutcome_SuccessValue
	//	*ExecutionOutcome_SuccessReceiptId
	Status   isExecutionOutcome_Status `protobuf_oneof:"status"`
	Metadata ExecutionMetadata         `protobuf:"varint,6,opt,name=metadata,proto3,enum=sf.near.codec.v1.ExecutionMetadata" json:"metadata,omitempty"`
}

func (x *ExecutionOutcome) Reset() {
	*x = ExecutionOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionOutcome) ProtoMessage() {}

func (x *ExecutionOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionOutcome.ProtoReflect.Descriptor instead.
func (*ExecutionOutcome) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{25}
}

func (x *ExecutionOutcome) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ExecutionOutcome) GetReceiptIds() []*CryptoHash {
	if x != nil {
		return x.ReceiptIds
	}
	return nil
}

func (x *ExecutionOutcome) GetGasBurnt() uint64 {
	if x != nil {
		return x.GasBurnt
	}
	return 0
}

func (x *ExecutionOutcome) GetTokensBurnt() *BigInt {
	if x != nil {
		return x.TokensBurnt
	}
	return nil
}

func (x *ExecutionOutcome) GetExecutorId() string {
	if x != nil {
		return x.ExecutorId
	}
	return ""
}

func (m *ExecutionOutcome) GetStatus() isExecutionOutcome_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *ExecutionOutcome) GetUnknown() *UnknownExecutionStatus {
	if x, ok := x.GetStatus().(*ExecutionOutcome_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *ExecutionOutcome) GetFailure() *FailureExecutionStatus {
	if x, ok := x.GetStatus().(*ExecutionOutcome_Failure); ok {
		return x.Failure
	}
	return nil
}

func (x *ExecutionOutcome) GetSuccessValue() *SuccessValueExecutionStatus {
	if x, ok := x.GetStatus().(*ExecutionOutcome_SuccessValue); ok {
		return x.SuccessValue
	}
	return nil
}

func (x *ExecutionOutcome) GetSuccessReceiptId() *SuccessReceiptIdExecutionStatus {
	if x, ok := x.GetStatus().(*ExecutionOutcome_SuccessReceiptId); ok {
		return x.SuccessReceiptId
	}
	return nil
}

func (x *ExecutionOutcome) GetMetadata() ExecutionMetadata {
	if x != nil {
		return x.Metadata
	}
	return ExecutionMetadata_ExecutionMetadataV1
}

type isExecutionOutcome_Status interface {
	isExecutionOutcome_Status()
}

type ExecutionOutcome_Unknown struct {
	Unknown *UnknownExecutionStatus `protobuf:"bytes,20,opt,name=unknown,proto3,oneof"`
}

type ExecutionOutcome_Failure struct {
	Failure *FailureExecutionStatus `protobuf:"bytes,21,opt,name=failure,proto3,oneof"`
}

type ExecutionOutcome_SuccessValue struct {
	SuccessValue *SuccessValueExecutionStatus `protobuf:"bytes,22,opt,name=success_value,json=successValue,proto3,oneof"`
}

type ExecutionOutcome_SuccessReceiptId struct {
	SuccessReceiptId *SuccessReceiptIdExecutionStatus `protobuf:"bytes,23,opt,name=success_receipt_id,json=successReceiptId,proto3,oneof"`
}

func (*ExecutionOutcome_Unknown) isExecutionOutcome_Status() {}

func (*ExecutionOutcome_Failure) isExecutionOutcome_Status() {}

func (*ExecutionOutcome_SuccessValue) isExecutionOutcome_Status() {}

func (*ExecutionOutcome_SuccessReceiptId) isExecutionOutcome_Status() {}

type SuccessValueExecutionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SuccessValueExecutionStatus) Reset() {
	*x = SuccessValueExecutionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessValueExecutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessValueExecutionStatus) ProtoMessage() {}

func (x *SuccessValueExecutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessValueExecutionStatus.ProtoReflect.Descriptor instead.
func (*SuccessValueExecutionStatus) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{26}
}

func (x *SuccessValueExecutionStatus) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SuccessReceiptIdExecutionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *CryptoHash `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SuccessReceiptIdExecutionStatus) Reset() {
	*x = SuccessReceiptIdExecutionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessReceiptIdExecutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessReceiptIdExecutionStatus) ProtoMessage() {}

func (x *SuccessReceiptIdExecutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessReceiptIdExecutionStatus.ProtoReflect.Descriptor instead.
func (*SuccessReceiptIdExecutionStatus) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{27}
}

func (x *SuccessReceiptIdExecutionStatus) GetId() *CryptoHash {
	if x != nil {
		return x.Id
	}
	return nil
}

type UnknownExecutionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnknownExecutionStatus) Reset() {
	*x = UnknownExecutionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownExecutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownExecutionStatus) ProtoMessage() {}

func (x *UnknownExecutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownExecutionStatus.ProtoReflect.Descriptor instead.
func (*UnknownExecutionStatus) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{28}
}

type FailureExecutionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Failure:
	//	*FailureExecutionStatus_ActionError
	//	*FailureExecutionStatus_InvalidTxError
	Failure isFailureExecutionStatus_Failure `protobuf_oneof:"failure"`
}

func (x *FailureExecutionStatus) Reset() {
	*x = FailureExecutionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureExecutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureExecutionStatus) ProtoMessage() {}

func (x *FailureExecutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureExecutionStatus.ProtoReflect.Descriptor instead.
func (*FailureExecutionStatus) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{29}
}

func (m *FailureExecutionStatus) GetFailure() isFailureExecutionStatus_Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (x *FailureExecutionStatus) GetActionError() *ActionError {
	if x, ok := x.GetFailure().(*FailureExecutionStatus_ActionError); ok {
		return x.ActionError
	}
	return nil
}

func (x *FailureExecutionStatus) GetInvalidTxError() InvalidTxError {
	if x, ok := x.GetFailure().(*FailureExecutionStatus_InvalidTxError); ok {
		return x.InvalidTxError
	}
	return InvalidTxError_InvalidAccessKeyError
}

type isFailureExecutionStatus_Failure interface {
	isFailureExecutionStatus_Failure()
}

type FailureExecutionStatus_ActionError struct {
	ActionError *ActionError `protobuf:"bytes,1,opt,name=action_error,json=actionError,proto3,oneof"`
}

type FailureExecutionStatus_InvalidTxError struct {
	InvalidTxError InvalidTxError `protobuf:"varint,2,opt,name=invalid_tx_error,json=invalidTxError,proto3,enum=sf.near.codec.v1.InvalidTxError,oneof"`
}

func (*FailureExecutionStatus_ActionError) isFailureExecutionStatus_Failure() {}

func (*FailureExecutionStatus_InvalidTxError) isFailureExecutionStatus_Failure() {}

type ActionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Types that are assignable to Kind:
	//	*ActionError_AccountAlreadyExist
	//	*ActionError_AccountDoesNotExist
	//	*ActionError_CreateAccountOnlyByRegistrar
	//	*ActionError_CreateAccountNotAllowed
	//	*ActionError_ActorNoPermission
	//	*ActionError_DeleteKeyDoesNotExist
	//	*ActionError_AddKeyAlreadyExists
	//	*ActionError_DeleteAccountStaking
	//	*ActionError_LackBalanceForState
	//	*ActionError_TriesToUnstake
	//	*ActionError_TriesToStake
	//	*ActionError_InsufficientStake
	//	*ActionError_FunctionCall
	//	*ActionError_NewReceiptValidation
	//	*ActionError_OnlyImplicitAccountCreationAllowed
	//	*ActionError_DeleteAccountWithLargeState
	Kind isActionError_Kind `protobuf_oneof:"kind"`
}

func (x *ActionError) Reset() {
	*x = ActionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionError) ProtoMessage() {}

func (x *ActionError) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionError.ProtoReflect.Descriptor instead.
func (*ActionError) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{30}
}

func (x *ActionError) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (m *ActionError) GetKind() isActionError_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *ActionError) GetAccountAlreadyExist() *AccountAlreadyExistsErrorKind {
	if x, ok := x.GetKind().(*ActionError_AccountAlreadyExist); ok {
		return x.AccountAlreadyExist
	}
	return nil
}

func (x *ActionError) GetAccountDoesNotExist() *AccountDoesNotExistErrorKind {
	if x, ok := x.GetKind().(*ActionError_AccountDoesNotExist); ok {
		return x.AccountDoesNotExist
	}
	return nil
}

func (x *ActionError) GetCreateAccountOnlyByRegistrar() *CreateAccountOnlyByRegistrarErrorKind {
	if x, ok := x.GetKind().(*ActionError_CreateAccountOnlyByRegistrar); ok {
		return x.CreateAccountOnlyByRegistrar
	}
	return nil
}

func (x *ActionError) GetCreateAccountNotAllowed() *CreateAccountNotAllowedErrorKind {
	if x, ok := x.GetKind().(*ActionError_CreateAccountNotAllowed); ok {
		return x.CreateAccountNotAllowed
	}
	return nil
}

func (x *ActionError) GetActorNoPermission() *ActorNoPermissionErrorKind {
	if x, ok := x.GetKind().(*ActionError_ActorNoPermission); ok {
		return x.ActorNoPermission
	}
	return nil
}

func (x *ActionError) GetDeleteKeyDoesNotExist() *DeleteKeyDoesNotExistErrorKind {
	if x, ok := x.GetKind().(*ActionError_DeleteKeyDoesNotExist); ok {
		return x.DeleteKeyDoesNotExist
	}
	return nil
}

func (x *ActionError) GetAddKeyAlreadyExists() *AddKeyAlreadyExistsErrorKind {
	if x, ok := x.GetKind().(*ActionError_AddKeyAlreadyExists); ok {
		return x.AddKeyAlreadyExists
	}
	return nil
}

func (x *ActionError) GetDeleteAccountStaking() *DeleteAccountStakingErrorKind {
	if x, ok := x.GetKind().(*ActionError_DeleteAccountStaking); ok {
		return x.DeleteAccountStaking
	}
	return nil
}

func (x *ActionError) GetLackBalanceForState() *LackBalanceForStateErrorKind {
	if x, ok := x.GetKind().(*ActionError_LackBalanceForState); ok {
		return x.LackBalanceForState
	}
	return nil
}

func (x *ActionError) GetTriesToUnstake() *TriesToUnstakeErrorKind {
	if x, ok := x.GetKind().(*ActionError_TriesToUnstake); ok {
		return x.TriesToUnstake
	}
	return nil
}

func (x *ActionError) GetTriesToStake() *TriesToStakeErrorKind {
	if x, ok := x.GetKind().(*ActionError_TriesToStake); ok {
		return x.TriesToStake
	}
	return nil
}

func (x *ActionError) GetInsufficientStake() *InsufficientStakeErrorKind {
	if x, ok := x.GetKind().(*ActionError_InsufficientStake); ok {
		return x.InsufficientStake
	}
	return nil
}

func (x *ActionError) GetFunctionCall() *FunctionCallErrorKind {
	if x, ok := x.GetKind().(*ActionError_FunctionCall); ok {
		return x.FunctionCall
	}
	return nil
}

func (x *ActionError) GetNewReceiptValidation() *NewReceiptValidationErrorKind {
	if x, ok := x.GetKind().(*ActionError_NewReceiptValidation); ok {
		return x.NewReceiptValidation
	}
	return nil
}

func (x *ActionError) GetOnlyImplicitAccountCreationAllowed() *OnlyImplicitAccountCreationAllowedErrorKind {
	if x, ok := x.GetKind().(*ActionError_OnlyImplicitAccountCreationAllowed); ok {
		return x.OnlyImplicitAccountCreationAllowed
	}
	return nil
}

func (x *ActionError) GetDeleteAccountWithLargeState() *DeleteAccountWithLargeStateErrorKind {
	if x, ok := x.GetKind().(*ActionError_DeleteAccountWithLargeState); ok {
		return x.DeleteAccountWithLargeState
	}
	return nil
}

type isActionError_Kind interface {
	isActionError_Kind()
}

type ActionError_AccountAlreadyExist struct {
	AccountAlreadyExist *AccountAlreadyExistsErrorKind `protobuf:"bytes,21,opt,name=account_already_exist,json=accountAlreadyExist,proto3,oneof"`
}

type ActionError_AccountDoesNotExist struct {
	AccountDoesNotExist *AccountDoesNotExistErrorKind `protobuf:"bytes,22,opt,name=account_does_not_exist,json=accountDoesNotExist,proto3,oneof"`
}

type ActionError_CreateAccountOnlyByRegistrar struct {
	CreateAccountOnlyByRegistrar *CreateAccountOnlyByRegistrarErrorKind `protobuf:"bytes,23,opt,name=create_account_only_by_registrar,json=createAccountOnlyByRegistrar,proto3,oneof"`
}

type ActionError_CreateAccountNotAllowed struct {
	CreateAccountNotAllowed *CreateAccountNotAllowedErrorKind `protobuf:"bytes,24,opt,name=create_account_not_allowed,json=createAccountNotAllowed,proto3,oneof"`
}

type ActionError_ActorNoPermission struct {
	ActorNoPermission *ActorNoPermissionErrorKind `protobuf:"bytes,25,opt,name=actor_no_permission,json=actorNoPermission,proto3,oneof"`
}

type ActionError_DeleteKeyDoesNotExist struct {
	DeleteKeyDoesNotExist *DeleteKeyDoesNotExistErrorKind `protobuf:"bytes,26,opt,name=delete_key_does_not_exist,json=deleteKeyDoesNotExist,proto3,oneof"`
}

type ActionError_AddKeyAlreadyExists struct {
	AddKeyAlreadyExists *AddKeyAlreadyExistsErrorKind `protobuf:"bytes,27,opt,name=add_key_already_exists,json=addKeyAlreadyExists,proto3,oneof"`
}

type ActionError_DeleteAccountStaking struct {
	DeleteAccountStaking *DeleteAccountStakingErrorKind `protobuf:"bytes,28,opt,name=delete_account_staking,json=deleteAccountStaking,proto3,oneof"`
}

type ActionError_LackBalanceForState struct {
	LackBalanceForState *LackBalanceForStateErrorKind `protobuf:"bytes,29,opt,name=lack_balance_for_state,json=lackBalanceForState,proto3,oneof"`
}

type ActionError_TriesToUnstake struct {
	TriesToUnstake *TriesToUnstakeErrorKind `protobuf:"bytes,30,opt,name=tries_to_unstake,json=triesToUnstake,proto3,oneof"`
}

type ActionError_TriesToStake struct {
	TriesToStake *TriesToStakeErrorKind `protobuf:"bytes,31,opt,name=tries_to_stake,json=triesToStake,proto3,oneof"`
}

type ActionError_InsufficientStake struct {
	InsufficientStake *InsufficientStakeErrorKind `protobuf:"bytes,32,opt,name=insufficient_stake,json=insufficientStake,proto3,oneof"`
}

type ActionError_FunctionCall struct {
	FunctionCall *FunctionCallErrorKind `protobuf:"bytes,33,opt,name=function_call,json=functionCall,proto3,oneof"`
}

type ActionError_NewReceiptValidation struct {
	NewReceiptValidation *NewReceiptValidationErrorKind `protobuf:"bytes,34,opt,name=new_receipt_validation,json=newReceiptValidation,proto3,oneof"`
}

type ActionError_OnlyImplicitAccountCreationAllowed struct {
	OnlyImplicitAccountCreationAllowed *OnlyImplicitAccountCreationAllowedErrorKind `protobuf:"bytes,35,opt,name=only_implicit_account_creation_allowed,json=onlyImplicitAccountCreationAllowed,proto3,oneof"`
}

type ActionError_DeleteAccountWithLargeState struct {
	DeleteAccountWithLargeState *DeleteAccountWithLargeStateErrorKind `protobuf:"bytes,36,opt,name=delete_account_with_large_state,json=deleteAccountWithLargeState,proto3,oneof"`
}

func (*ActionError_AccountAlreadyExist) isActionError_Kind() {}

func (*ActionError_AccountDoesNotExist) isActionError_Kind() {}

func (*ActionError_CreateAccountOnlyByRegistrar) isActionError_Kind() {}

func (*ActionError_CreateAccountNotAllowed) isActionError_Kind() {}

func (*ActionError_ActorNoPermission) isActionError_Kind() {}

func (*ActionError_DeleteKeyDoesNotExist) isActionError_Kind() {}

func (*ActionError_AddKeyAlreadyExists) isActionError_Kind() {}

func (*ActionError_DeleteAccountStaking) isActionError_Kind() {}

func (*ActionError_LackBalanceForState) isActionError_Kind() {}

func (*ActionError_TriesToUnstake) isActionError_Kind() {}

func (*ActionError_TriesToStake) isActionError_Kind() {}

func (*ActionError_InsufficientStake) isActionError_Kind() {}

func (*ActionError_FunctionCall) isActionError_Kind() {}

func (*ActionError_NewReceiptValidation) isActionError_Kind() {}

func (*ActionError_OnlyImplicitAccountCreationAllowed) isActionError_Kind() {}

func (*ActionError_DeleteAccountWithLargeState) isActionError_Kind() {}

type AccountAlreadyExistsErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AccountAlreadyExistsErrorKind) Reset() {
	*x = AccountAlreadyExistsErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAlreadyExistsErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAlreadyExistsErrorKind) ProtoMessage() {}

func (x *AccountAlreadyExistsErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAlreadyExistsErrorKind.ProtoReflect.Descriptor instead.
func (*AccountAlreadyExistsErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{31}
}

func (x *AccountAlreadyExistsErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type AccountDoesNotExistErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AccountDoesNotExistErrorKind) Reset() {
	*x = AccountDoesNotExistErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountDoesNotExistErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDoesNotExistErrorKind) ProtoMessage() {}

func (x *AccountDoesNotExistErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDoesNotExistErrorKind.ProtoReflect.Descriptor instead.
func (*AccountDoesNotExistErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{32}
}

func (x *AccountDoesNotExistErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

/// A top-level account ID can only be created by registrar.
type CreateAccountOnlyByRegistrarErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	RegistrarAccountId string `protobuf:"bytes,2,opt,name=registrar_account_id,json=registrarAccountId,proto3" json:"registrar_account_id,omitempty"`
	PredecessorId      string `protobuf:"bytes,3,opt,name=predecessor_id,json=predecessorId,proto3" json:"predecessor_id,omitempty"`
}

func (x *CreateAccountOnlyByRegistrarErrorKind) Reset() {
	*x = CreateAccountOnlyByRegistrarErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountOnlyByRegistrarErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountOnlyByRegistrarErrorKind) ProtoMessage() {}

func (x *CreateAccountOnlyByRegistrarErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountOnlyByRegistrarErrorKind.ProtoReflect.Descriptor instead.
func (*CreateAccountOnlyByRegistrarErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{33}
}

func (x *CreateAccountOnlyByRegistrarErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateAccountOnlyByRegistrarErrorKind) GetRegistrarAccountId() string {
	if x != nil {
		return x.RegistrarAccountId
	}
	return ""
}

func (x *CreateAccountOnlyByRegistrarErrorKind) GetPredecessorId() string {
	if x != nil {
		return x.PredecessorId
	}
	return ""
}

type CreateAccountNotAllowedErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PredecessorId string `protobuf:"bytes,2,opt,name=predecessor_id,json=predecessorId,proto3" json:"predecessor_id,omitempty"`
}

func (x *CreateAccountNotAllowedErrorKind) Reset() {
	*x = CreateAccountNotAllowedErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountNotAllowedErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountNotAllowedErrorKind) ProtoMessage() {}

func (x *CreateAccountNotAllowedErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountNotAllowedErrorKind.ProtoReflect.Descriptor instead.
func (*CreateAccountNotAllowedErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{34}
}

func (x *CreateAccountNotAllowedErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateAccountNotAllowedErrorKind) GetPredecessorId() string {
	if x != nil {
		return x.PredecessorId
	}
	return ""
}

type ActorNoPermissionErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ActorId   string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
}

func (x *ActorNoPermissionErrorKind) Reset() {
	*x = ActorNoPermissionErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorNoPermissionErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorNoPermissionErrorKind) ProtoMessage() {}

func (x *ActorNoPermissionErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorNoPermissionErrorKind.ProtoReflect.Descriptor instead.
func (*ActorNoPermissionErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{35}
}

func (x *ActorNoPermissionErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ActorNoPermissionErrorKind) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

type DeleteKeyDoesNotExistErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string     `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PublicKey *PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *DeleteKeyDoesNotExistErrorKind) Reset() {
	*x = DeleteKeyDoesNotExistErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyDoesNotExistErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyDoesNotExistErrorKind) ProtoMessage() {}

func (x *DeleteKeyDoesNotExistErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyDoesNotExistErrorKind.ProtoReflect.Descriptor instead.
func (*DeleteKeyDoesNotExistErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteKeyDoesNotExistErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DeleteKeyDoesNotExistErrorKind) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type AddKeyAlreadyExistsErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string     `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PublicKey *PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *AddKeyAlreadyExistsErrorKind) Reset() {
	*x = AddKeyAlreadyExistsErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKeyAlreadyExistsErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKeyAlreadyExistsErrorKind) ProtoMessage() {}

func (x *AddKeyAlreadyExistsErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKeyAlreadyExistsErrorKind.ProtoReflect.Descriptor instead.
func (*AddKeyAlreadyExistsErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{37}
}

func (x *AddKeyAlreadyExistsErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AddKeyAlreadyExistsErrorKind) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type DeleteAccountStakingErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *DeleteAccountStakingErrorKind) Reset() {
	*x = DeleteAccountStakingErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountStakingErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountStakingErrorKind) ProtoMessage() {}

func (x *DeleteAccountStakingErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountStakingErrorKind.ProtoReflect.Descriptor instead.
func (*DeleteAccountStakingErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteAccountStakingErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type LackBalanceForStateErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Balance   *BigInt `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *LackBalanceForStateErrorKind) Reset() {
	*x = LackBalanceForStateErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LackBalanceForStateErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LackBalanceForStateErrorKind) ProtoMessage() {}

func (x *LackBalanceForStateErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LackBalanceForStateErrorKind.ProtoReflect.Descriptor instead.
func (*LackBalanceForStateErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{39}
}

func (x *LackBalanceForStateErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *LackBalanceForStateErrorKind) GetBalance() *BigInt {
	if x != nil {
		return x.Balance
	}
	return nil
}

type TriesToUnstakeErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *TriesToUnstakeErrorKind) Reset() {
	*x = TriesToUnstakeErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriesToUnstakeErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriesToUnstakeErrorKind) ProtoMessage() {}

func (x *TriesToUnstakeErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriesToUnstakeErrorKind.ProtoReflect.Descriptor instead.
func (*TriesToUnstakeErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{40}
}

func (x *TriesToUnstakeErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type TriesToStakeErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Stake     *BigInt `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake,omitempty"`
	Locked    *BigInt `protobuf:"bytes,3,opt,name=locked,proto3" json:"locked,omitempty"`
	Balance   *BigInt `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *TriesToStakeErrorKind) Reset() {
	*x = TriesToStakeErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriesToStakeErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriesToStakeErrorKind) ProtoMessage() {}

func (x *TriesToStakeErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriesToStakeErrorKind.ProtoReflect.Descriptor instead.
func (*TriesToStakeErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{41}
}

func (x *TriesToStakeErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TriesToStakeErrorKind) GetStake() *BigInt {
	if x != nil {
		return x.Stake
	}
	return nil
}

func (x *TriesToStakeErrorKind) GetLocked() *BigInt {
	if x != nil {
		return x.Locked
	}
	return nil
}

func (x *TriesToStakeErrorKind) GetBalance() *BigInt {
	if x != nil {
		return x.Balance
	}
	return nil
}

type InsufficientStakeErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Stake        *BigInt `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake,omitempty"`
	MinimumStake *BigInt `protobuf:"bytes,3,opt,name=minimum_stake,json=minimumStake,proto3" json:"minimum_stake,omitempty"`
}

func (x *InsufficientStakeErrorKind) Reset() {
	*x = InsufficientStakeErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsufficientStakeErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsufficientStakeErrorKind) ProtoMessage() {}

func (x *InsufficientStakeErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsufficientStakeErrorKind.ProtoReflect.Descriptor instead.
func (*InsufficientStakeErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{42}
}

func (x *InsufficientStakeErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *InsufficientStakeErrorKind) GetStake() *BigInt {
	if x != nil {
		return x.Stake
	}
	return nil
}

func (x *InsufficientStakeErrorKind) GetMinimumStake() *BigInt {
	if x != nil {
		return x.MinimumStake
	}
	return nil
}

type FunctionCallErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error FunctionCallErrorSer `protobuf:"varint,1,opt,name=error,proto3,enum=sf.near.codec.v1.FunctionCallErrorSer" json:"error,omitempty"`
}

func (x *FunctionCallErrorKind) Reset() {
	*x = FunctionCallErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionCallErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallErrorKind) ProtoMessage() {}

func (x *FunctionCallErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallErrorKind.ProtoReflect.Descriptor instead.
func (*FunctionCallErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{43}
}

func (x *FunctionCallErrorKind) GetError() FunctionCallErrorSer {
	if x != nil {
		return x.Error
	}
	return FunctionCallErrorSer_CompilationError
}

type NewReceiptValidationErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error ReceiptValidationError `protobuf:"varint,1,opt,name=error,proto3,enum=sf.near.codec.v1.ReceiptValidationError" json:"error,omitempty"`
}

func (x *NewReceiptValidationErrorKind) Reset() {
	*x = NewReceiptValidationErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewReceiptValidationErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewReceiptValidationErrorKind) ProtoMessage() {}

func (x *NewReceiptValidationErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewReceiptValidationErrorKind.ProtoReflect.Descriptor instead.
func (*NewReceiptValidationErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{44}
}

func (x *NewReceiptValidationErrorKind) GetError() ReceiptValidationError {
	if x != nil {
		return x.Error
	}
	return ReceiptValidationError_InvalidPredecessorId
}

type OnlyImplicitAccountCreationAllowedErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *OnlyImplicitAccountCreationAllowedErrorKind) Reset() {
	*x = OnlyImplicitAccountCreationAllowedErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlyImplicitAccountCreationAllowedErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlyImplicitAccountCreationAllowedErrorKind) ProtoMessage() {}

func (x *OnlyImplicitAccountCreationAllowedErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlyImplicitAccountCreationAllowedErrorKind.ProtoReflect.Descriptor instead.
func (*OnlyImplicitAccountCreationAllowedErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{45}
}

func (x *OnlyImplicitAccountCreationAllowedErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type DeleteAccountWithLargeStateErrorKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *DeleteAccountWithLargeStateErrorKind) Reset() {
	*x = DeleteAccountWithLargeStateErrorKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountWithLargeStateErrorKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountWithLargeStateErrorKind) ProtoMessage() {}

func (x *DeleteAccountWithLargeStateErrorKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountWithLargeStateErrorKind.ProtoReflect.Descriptor instead.
func (*DeleteAccountWithLargeStateErrorKind) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteAccountWithLargeStateErrorKind) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type MerklePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path []*MerklePathItem `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *MerklePath) Reset() {
	*x = MerklePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklePath) ProtoMessage() {}

func (x *MerklePath) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklePath.ProtoReflect.Descriptor instead.
func (*MerklePath) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{47}
}

func (x *MerklePath) GetPath() []*MerklePathItem {
	if x != nil {
		return x.Path
	}
	return nil
}

type MerklePathItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash      *CryptoHash `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Direction Direction   `protobuf:"varint,2,opt,name=direction,proto3,enum=sf.near.codec.v1.Direction" json:"direction,omitempty"`
}

func (x *MerklePathItem) Reset() {
	*x = MerklePathItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklePathItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklePathItem) ProtoMessage() {}

func (x *MerklePathItem) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklePathItem.ProtoReflect.Descriptor instead.
func (*MerklePathItem) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{48}
}

func (x *MerklePathItem) GetHash() *CryptoHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *MerklePathItem) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_left
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*Action_CreateAccount
	//	*Action_DeployContract
	//	*Action_FunctionCall
	//	*Action_Transfer
	//	*Action_Stake
	//	*Action_AddKey
	//	*Action_DeleteKey
	//	*Action_DeleteAccount
	Action isAction_Action `protobuf_oneof:"action"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{49}
}

func (m *Action) GetAction() isAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Action) GetCreateAccount() *CreateAccountAction {
	if x, ok := x.GetAction().(*Action_CreateAccount); ok {
		return x.CreateAccount
	}
	return nil
}

func (x *Action) GetDeployContract() *DeployContractAction {
	if x, ok := x.GetAction().(*Action_DeployContract); ok {
		return x.DeployContract
	}
	return nil
}

func (x *Action) GetFunctionCall() *FunctionCallAction {
	if x, ok := x.GetAction().(*Action_FunctionCall); ok {
		return x.FunctionCall
	}
	return nil
}

func (x *Action) GetTransfer() *TransferAction {
	if x, ok := x.GetAction().(*Action_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *Action) GetStake() *StakeAction {
	if x, ok := x.GetAction().(*Action_Stake); ok {
		return x.Stake
	}
	return nil
}

func (x *Action) GetAddKey() *AddKeyAction {
	if x, ok := x.GetAction().(*Action_AddKey); ok {
		return x.AddKey
	}
	return nil
}

func (x *Action) GetDeleteKey() *DeleteKeyAction {
	if x, ok := x.GetAction().(*Action_DeleteKey); ok {
		return x.DeleteKey
	}
	return nil
}

func (x *Action) GetDeleteAccount() *DeleteAccountAction {
	if x, ok := x.GetAction().(*Action_DeleteAccount); ok {
		return x.DeleteAccount
	}
	return nil
}

type isAction_Action interface {
	isAction_Action()
}

type Action_CreateAccount struct {
	CreateAccount *CreateAccountAction `protobuf:"bytes,1,opt,name=create_account,json=createAccount,proto3,oneof"`
}

type Action_DeployContract struct {
	DeployContract *DeployContractAction `protobuf:"bytes,2,opt,name=deploy_contract,json=deployContract,proto3,oneof"`
}

type Action_FunctionCall struct {
	FunctionCall *FunctionCallAction `protobuf:"bytes,3,opt,name=function_call,json=functionCall,proto3,oneof"`
}

type Action_Transfer struct {
	Transfer *TransferAction `protobuf:"bytes,4,opt,name=transfer,proto3,oneof"`
}

type Action_Stake struct {
	Stake *StakeAction `protobuf:"bytes,5,opt,name=stake,proto3,oneof"`
}

type Action_AddKey struct {
	AddKey *AddKeyAction `protobuf:"bytes,6,opt,name=add_key,json=addKey,proto3,oneof"`
}

type Action_DeleteKey struct {
	DeleteKey *DeleteKeyAction `protobuf:"bytes,7,opt,name=delete_key,json=deleteKey,proto3,oneof"`
}

type Action_DeleteAccount struct {
	DeleteAccount *DeleteAccountAction `protobuf:"bytes,8,opt,name=delete_account,json=deleteAccount,proto3,oneof"`
}

func (*Action_CreateAccount) isAction_Action() {}

func (*Action_DeployContract) isAction_Action() {}

func (*Action_FunctionCall) isAction_Action() {}

func (*Action_Transfer) isAction_Action() {}

func (*Action_Stake) isAction_Action() {}

func (*Action_AddKey) isAction_Action() {}

func (*Action_DeleteKey) isAction_Action() {}

func (*Action_DeleteAccount) isAction_Action() {}

type CreateAccountAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateAccountAction) Reset() {
	*x = CreateAccountAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountAction) ProtoMessage() {}

func (x *CreateAccountAction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountAction.ProtoReflect.Descriptor instead.
func (*CreateAccountAction) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{50}
}

type DeployContractAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code []byte `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *DeployContractAction) Reset() {
	*x = DeployContractAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployContractAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployContractAction) ProtoMessage() {}

func (x *DeployContractAction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployContractAction.ProtoReflect.Descriptor instead.
func (*DeployContractAction) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{51}
}

func (x *DeployContractAction) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type FunctionCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodName string  `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Args       []byte  `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
	Gas        uint64  `protobuf:"varint,3,opt,name=gas,proto3" json:"gas,omitempty"`
	Deposit    *BigInt `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (x *FunctionCallAction) Reset() {
	*x = FunctionCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallAction) ProtoMessage() {}

func (x *FunctionCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallAction.ProtoReflect.Descriptor instead.
func (*FunctionCallAction) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{52}
}

func (x *FunctionCallAction) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *FunctionCallAction) GetArgs() []byte {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *FunctionCallAction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *FunctionCallAction) GetDeposit() *BigInt {
	if x != nil {
		return x.Deposit
	}
	return nil
}

type TransferAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deposit *BigInt `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (x *TransferAction) Reset() {
	*x = TransferAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferAction) ProtoMessage() {}

func (x *TransferAction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferAction.ProtoReflect.Descriptor instead.
func (*TransferAction) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{53}
}

func (x *TransferAction) GetDeposit() *BigInt {
	if x != nil {
		return x.Deposit
	}
	return nil
}

type StakeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stake     *BigInt    `protobuf:"bytes,1,opt,name=stake,proto3" json:"stake,omitempty"`
	PublicKey *PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *StakeAction) Reset() {
	*x = StakeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAction) ProtoMessage() {}

func (x *StakeAction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAction.ProtoReflect.Descriptor instead.
func (*StakeAction) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{54}
}

func (x *StakeAction) GetStake() *BigInt {
	if x != nil {
		return x.Stake
	}
	return nil
}

func (x *StakeAction) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type AddKeyAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey *PublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	AccessKey *AccessKey `protobuf:"bytes,2,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
}

func (x *AddKeyAction) Reset() {
	*x = AddKeyAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKeyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKeyAction) ProtoMessage() {}

func (x *AddKeyAction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKeyAction.ProtoReflect.Descriptor instead.
func (*AddKeyAction) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{55}
}

func (x *AddKeyAction) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *AddKeyAction) GetAccessKey() *AccessKey {
	if x != nil {
		return x.AccessKey
	}
	return nil
}

type DeleteKeyAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey *PublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *DeleteKeyAction) Reset() {
	*x = DeleteKeyAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyAction) ProtoMessage() {}

func (x *DeleteKeyAction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyAction.ProtoReflect.Descriptor instead.
func (*DeleteKeyAction) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{56}
}

func (x *DeleteKeyAction) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type DeleteAccountAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneficiaryId string `protobuf:"bytes,1,opt,name=beneficiary_id,json=beneficiaryId,proto3" json:"beneficiary_id,omitempty"`
}

func (x *DeleteAccountAction) Reset() {
	*x = DeleteAccountAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountAction) ProtoMessage() {}

func (x *DeleteAccountAction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountAction.ProtoReflect.Descriptor instead.
func (*DeleteAccountAction) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{57}
}

func (x *DeleteAccountAction) GetBeneficiaryId() string {
	if x != nil {
		return x.BeneficiaryId
	}
	return ""
}

type AccessKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce      uint64               `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Permission *AccessKeyPermission `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *AccessKey) Reset() {
	*x = AccessKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessKey) ProtoMessage() {}

func (x *AccessKey) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessKey.ProtoReflect.Descriptor instead.
func (*AccessKey) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{58}
}

func (x *AccessKey) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *AccessKey) GetPermission() *AccessKeyPermission {
	if x != nil {
		return x.Permission
	}
	return nil
}

type AccessKeyPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Permission:
	//	*AccessKeyPermission_FunctionCall
	//	*AccessKeyPermission_FullAccess
	Permission isAccessKeyPermission_Permission `protobuf_oneof:"permission"`
}

func (x *AccessKeyPermission) Reset() {
	*x = AccessKeyPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessKeyPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessKeyPermission) ProtoMessage() {}

func (x *AccessKeyPermission) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessKeyPermission.ProtoReflect.Descriptor instead.
func (*AccessKeyPermission) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{59}
}

func (m *AccessKeyPermission) GetPermission() isAccessKeyPermission_Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

func (x *AccessKeyPermission) GetFunctionCall() *FunctionCallPermission {
	if x, ok := x.GetPermission().(*AccessKeyPermission_FunctionCall); ok {
		return x.FunctionCall
	}
	return nil
}

func (x *AccessKeyPermission) GetFullAccess() *FullAccessPermission {
	if x, ok := x.GetPermission().(*AccessKeyPermission_FullAccess); ok {
		return x.FullAccess
	}
	return nil
}

type isAccessKeyPermission_Permission interface {
	isAccessKeyPermission_Permission()
}

type AccessKeyPermission_FunctionCall struct {
	FunctionCall *FunctionCallPermission `protobuf:"bytes,1,opt,name=function_call,json=functionCall,proto3,oneof"`
}

type AccessKeyPermission_FullAccess struct {
	FullAccess *FullAccessPermission `protobuf:"bytes,2,opt,name=full_access,json=fullAccess,proto3,oneof"`
}

func (*AccessKeyPermission_FunctionCall) isAccessKeyPermission_Permission() {}

func (*AccessKeyPermission_FullAccess) isAccessKeyPermission_Permission() {}

type FunctionCallPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowance   *BigInt  `protobuf:"bytes,1,opt,name=allowance,proto3" json:"allowance,omitempty"`
	ReceiverId  string   `protobuf:"bytes,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	MethodNames []string `protobuf:"bytes,3,rep,name=method_names,json=methodNames,proto3" json:"method_names,omitempty"`
}

func (x *FunctionCallPermission) Reset() {
	*x = FunctionCallPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionCallPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallPermission) ProtoMessage() {}

func (x *FunctionCallPermission) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallPermission.ProtoReflect.Descriptor instead.
func (*FunctionCallPermission) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{60}
}

func (x *FunctionCallPermission) GetAllowance() *BigInt {
	if x != nil {
		return x.Allowance
	}
	return nil
}

func (x *FunctionCallPermission) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

func (x *FunctionCallPermission) GetMethodNames() []string {
	if x != nil {
		return x.MethodNames
	}
	return nil
}

type FullAccessPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FullAccessPermission) Reset() {
	*x = FullAccessPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullAccessPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullAccessPermission) ProtoMessage() {}

func (x *FullAccessPermission) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullAccessPermission.ProtoReflect.Descriptor instead.
func (*FullAccessPermission) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{61}
}

type StateChangeCause_NotWritableToDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StateChangeCause_NotWritableToDisk) Reset() {
	*x = StateChangeCause_NotWritableToDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeCause_NotWritableToDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeCause_NotWritableToDisk) ProtoMessage() {}

func (x *StateChangeCause_NotWritableToDisk) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeCause_NotWritableToDisk.ProtoReflect.Descriptor instead.
func (*StateChangeCause_NotWritableToDisk) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{3, 0}
}

type StateChangeCause_InitialState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StateChangeCause_InitialState) Reset() {
	*x = StateChangeCause_InitialState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeCause_InitialState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeCause_InitialState) ProtoMessage() {}

func (x *StateChangeCause_InitialState) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeCause_InitialState.ProtoReflect.Descriptor instead.
func (*StateChangeCause_InitialState) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{3, 1}
}

type StateChangeCause_TransactionProcessing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash *CryptoHash `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *StateChangeCause_TransactionProcessing) Reset() {
	*x = StateChangeCause_TransactionProcessing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeCause_TransactionProcessing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeCause_TransactionProcessing) ProtoMessage() {}

func (x *StateChangeCause_TransactionProcessing) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeCause_TransactionProcessing.ProtoReflect.Descriptor instead.
func (*StateChangeCause_TransactionProcessing) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{3, 2}
}

func (x *StateChangeCause_TransactionProcessing) GetTxHash() *CryptoHash {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type StateChangeCause_ActionReceiptProcessingStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptHash *CryptoHash `protobuf:"bytes,1,opt,name=receipt_hash,json=receiptHash,proto3" json:"receipt_hash,omitempty"`
}

func (x *StateChangeCause_ActionReceiptProcessingStarted) Reset() {
	*x = StateChangeCause_ActionReceiptProcessingStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeCause_ActionReceiptProcessingStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeCause_ActionReceiptProcessingStarted) ProtoMessage() {}

func (x *StateChangeCause_ActionReceiptProcessingStarted) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeCause_ActionReceiptProcessingStarted.ProtoReflect.Descriptor instead.
func (*StateChangeCause_ActionReceiptProcessingStarted) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{3, 3}
}

func (x *StateChangeCause_ActionReceiptProcessingStarted) GetReceiptHash() *CryptoHash {
	if x != nil {
		return x.ReceiptHash
	}
	return nil
}

type StateChangeCause_ActionReceiptGasReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash *CryptoHash `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *StateChangeCause_ActionReceiptGasReward) Reset() {
	*x = StateChangeCause_ActionReceiptGasReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeCause_ActionReceiptGasReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeCause_ActionReceiptGasReward) ProtoMessage() {}

func (x *StateChangeCause_ActionReceiptGasReward) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeCause_ActionReceiptGasReward.ProtoReflect.Descriptor instead.
func (*StateChangeCause_ActionReceiptGasReward) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{3, 4}
}

func (x *StateChangeCause_ActionReceiptGasReward) GetTxHash() *CryptoHash {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type StateChangeCause_ReceiptProcessing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash *CryptoHash `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *StateChangeCause_ReceiptProcessing) Reset() {
	*x = StateChangeCause_ReceiptProcessing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeCause_ReceiptProcessing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeCause_ReceiptProcessing) ProtoMessage() {}

func (x *StateChangeCause_ReceiptProcessing) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeCause_ReceiptProcessing.ProtoReflect.Descriptor instead.
func (*StateChangeCause_ReceiptProcessing) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{3, 5}
}

func (x *StateChangeCause_ReceiptProcessing) GetTxHash() *CryptoHash {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type StateChangeCause_PostponedReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash *CryptoHash `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *StateChangeCause_PostponedReceipt) Reset() {
	*x = StateChangeCause_PostponedReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeCause_PostponedReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeCause_PostponedReceipt) ProtoMessage() {}

func (x *StateChangeCause_PostponedReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeCause_PostponedReceipt.ProtoReflect.Descriptor instead.
func (*StateChangeCause_PostponedReceipt) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{3, 6}
}

func (x *StateChangeCause_PostponedReceipt) GetTxHash() *CryptoHash {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type StateChangeCause_UpdatedDelayedReceipts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StateChangeCause_UpdatedDelayedReceipts) Reset() {
	*x = StateChangeCause_UpdatedDelayedReceipts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeCause_UpdatedDelayedReceipts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeCause_UpdatedDelayedReceipts) ProtoMessage() {}

func (x *StateChangeCause_UpdatedDelayedReceipts) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeCause_UpdatedDelayedReceipts.ProtoReflect.Descriptor instead.
func (*StateChangeCause_UpdatedDelayedReceipts) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{3, 7}
}

type StateChangeCause_ValidatorAccountsUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StateChangeCause_ValidatorAccountsUpdate) Reset() {
	*x = StateChangeCause_ValidatorAccountsUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeCause_ValidatorAccountsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeCause_ValidatorAccountsUpdate) ProtoMessage() {}

func (x *StateChangeCause_ValidatorAccountsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeCause_ValidatorAccountsUpdate.ProtoReflect.Descriptor instead.
func (*StateChangeCause_ValidatorAccountsUpdate) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{3, 8}
}

type StateChangeCause_Migration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StateChangeCause_Migration) Reset() {
	*x = StateChangeCause_Migration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeCause_Migration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeCause_Migration) ProtoMessage() {}

func (x *StateChangeCause_Migration) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeCause_Migration.ProtoReflect.Descriptor instead.
func (*StateChangeCause_Migration) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{3, 9}
}

type StateChangeValue_AccountUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string   `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Account   *Account `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *StateChangeValue_AccountUpdate) Reset() {
	*x = StateChangeValue_AccountUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeValue_AccountUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeValue_AccountUpdate) ProtoMessage() {}

func (x *StateChangeValue_AccountUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeValue_AccountUpdate.ProtoReflect.Descriptor instead.
func (*StateChangeValue_AccountUpdate) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{4, 0}
}

func (x *StateChangeValue_AccountUpdate) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *StateChangeValue_AccountUpdate) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type StateChangeValue_AccountDeletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *StateChangeValue_AccountDeletion) Reset() {
	*x = StateChangeValue_AccountDeletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeValue_AccountDeletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeValue_AccountDeletion) ProtoMessage() {}

func (x *StateChangeValue_AccountDeletion) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeValue_AccountDeletion.ProtoReflect.Descriptor instead.
func (*StateChangeValue_AccountDeletion) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{4, 1}
}

func (x *StateChangeValue_AccountDeletion) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type StateChangeValue_AccessKeyUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string     `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PublicKey *PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	AccessKey *AccessKey `protobuf:"bytes,3,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
}

func (x *StateChangeValue_AccessKeyUpdate) Reset() {
	*x = StateChangeValue_AccessKeyUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeValue_AccessKeyUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeValue_AccessKeyUpdate) ProtoMessage() {}

func (x *StateChangeValue_AccessKeyUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeValue_AccessKeyUpdate.ProtoReflect.Descriptor instead.
func (*StateChangeValue_AccessKeyUpdate) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{4, 2}
}

func (x *StateChangeValue_AccessKeyUpdate) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *StateChangeValue_AccessKeyUpdate) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *StateChangeValue_AccessKeyUpdate) GetAccessKey() *AccessKey {
	if x != nil {
		return x.AccessKey
	}
	return nil
}

type StateChangeValue_AccessKeyDeletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string     `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PublicKey *PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *StateChangeValue_AccessKeyDeletion) Reset() {
	*x = StateChangeValue_AccessKeyDeletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeValue_AccessKeyDeletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeValue_AccessKeyDeletion) ProtoMessage() {}

func (x *StateChangeValue_AccessKeyDeletion) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeValue_AccessKeyDeletion.ProtoReflect.Descriptor instead.
func (*StateChangeValue_AccessKeyDeletion) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{4, 3}
}

func (x *StateChangeValue_AccessKeyDeletion) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *StateChangeValue_AccessKeyDeletion) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type StateChangeValue_DataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Key       []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StateChangeValue_DataUpdate) Reset() {
	*x = StateChangeValue_DataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeValue_DataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeValue_DataUpdate) ProtoMessage() {}

func (x *StateChangeValue_DataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeValue_DataUpdate.ProtoReflect.Descriptor instead.
func (*StateChangeValue_DataUpdate) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{4, 4}
}

func (x *StateChangeValue_DataUpdate) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *StateChangeValue_DataUpdate) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StateChangeValue_DataUpdate) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type StateChangeValue_DataDeletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Key       []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *StateChangeValue_DataDeletion) Reset() {
	*x = StateChangeValue_DataDeletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeValue_DataDeletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeValue_DataDeletion) ProtoMessage() {}

func (x *StateChangeValue_DataDeletion) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeValue_DataDeletion.ProtoReflect.Descriptor instead.
func (*StateChangeValue_DataDeletion) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{4, 5}
}

func (x *StateChangeValue_DataDeletion) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *StateChangeValue_DataDeletion) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type StateChangeValue_ContractCodeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Code      []byte `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *StateChangeValue_ContractCodeUpdate) Reset() {
	*x = StateChangeValue_ContractCodeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeValue_ContractCodeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeValue_ContractCodeUpdate) ProtoMessage() {}

func (x *StateChangeValue_ContractCodeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeValue_ContractCodeUpdate.ProtoReflect.Descriptor instead.
func (*StateChangeValue_ContractCodeUpdate) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{4, 6}
}

func (x *StateChangeValue_ContractCodeUpdate) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *StateChangeValue_ContractCodeUpdate) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type StateChangeValue_ContractCodeDeletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *StateChangeValue_ContractCodeDeletion) Reset() {
	*x = StateChangeValue_ContractCodeDeletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_near_codec_v1_codec_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChangeValue_ContractCodeDeletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChangeValue_ContractCodeDeletion) ProtoMessage() {}

func (x *StateChangeValue_ContractCodeDeletion) ProtoReflect() protoreflect.Message {
	mi := &file_sf_near_codec_v1_codec_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChangeValue_ContractCodeDeletion.ProtoReflect.Descriptor instead.
func (*StateChangeValue_ContractCodeDeletion) Descriptor() ([]byte, []int) {
	return file_sf_near_codec_v1_codec_proto_rawDescGZIP(), []int{4, 7}
}

func (x *StateChangeValue_ContractCodeDeletion) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

var File_sf_near_codec_v1_codec_proto protoreflect.FileDescriptor

var file_sf_near_codec_v1_codec_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x66, 0x2f, 0x6e, 0x65, 0x61, 0x72, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x22, 0x9f, 0x02, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x22, 0x48, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x8a, 0x01, 0x0a,
	0x14, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x38, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x22, 0xe4, 0x0c, 0x0a, 0x10, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x2e, 0x4e, 0x6f, 0x74, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x44, 0x69,
	0x73, 0x6b, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x56, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x71, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x12, 0x8e, 0x01, 0x0a, 0x21, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x76, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x48, 0x00, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x47, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x65, 0x0a, 0x12, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x12, 0x62, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x75, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x73, 0x48, 0x00, 0x52, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x78, 0x0a,
	0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x44, 0x69, 0x73, 0x6b, 0x1a, 0x0e, 0x0a, 0x0c, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4e, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x61, 0x0a, 0x1e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x4f, 0x0a,
	0x16, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x61,
	0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x4a,
	0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x49, 0x0a, 0x10, 0x50, 0x6f,
	0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x35,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x1a,
	0x19, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x0b, 0x0a, 0x09, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x22, 0xe6, 0x0b, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x5f, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x60, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73,
	0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x66, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x63, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x30, 0x0a,
	0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a,
	0xa8, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3a,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x1a, 0x6e, 0x0a, 0x11, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1a, 0x53, 0x0a, 0x0a, 0x44, 0x61,
	0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x3f, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x1a, 0x47, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x35, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0xda, 0x0e, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x39, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x4c, 0x0a, 0x13, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x11, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x4a,
	0x0a, 0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x78, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0b, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x09, 0x67,
	0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x46, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x73, 0x5f,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x73,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x4b, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x44, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x0a,
	0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x48, 0x0a,
	0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x79, 0x6e, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x06, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x22, 0x0a, 0x0a, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x52,
	0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x76, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x22, 0x57, 0x0a, 0x10, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x22, 0xfa, 0x05, 0x0a, 0x0b, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0c, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x74, 0x78, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x51, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x72, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x22, 0xb0, 0x01, 0x0a,
	0x22, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x55, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22,
	0xe9, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x53, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1d,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xc4, 0x02, 0x0a,
	0x11, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3a, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0xb8, 0x01, 0x0a, 0x2a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x12, 0x55, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0x89,
	0x02, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x09, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0x58, 0x0a, 0x0b, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xf8, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x09,
	0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0c, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x66, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x35, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22,
	0xf0, 0x04, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x62,
	0x75, 0x72, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x42,
	0x75, 0x72, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x62,
	0x75, 0x72, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69,
	0x67, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x75, 0x72, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x54,
	0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x61, 0x0a, 0x12, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x49, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x33, 0x0a, 0x1b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x16, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x4c, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x78, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x66,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x09, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xcb, 0x0d, 0x0a, 0x0b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x65, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61,
	0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x81,
	0x01, 0x0a, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x79,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x72, 0x12, 0x71, 0x0a, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x17, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x6f, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x13, 0x61, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x16, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x14, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x16, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x55,
	0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69,
	0x65, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x11,
	0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x67, 0x0a, 0x16, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x14, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x26, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x66,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x6e, 0x6c, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x22, 0x6f, 0x6e,
	0x6c, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x12, 0x7e, 0x0a, 0x1f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x1b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x3e, 0x0a, 0x1d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64,
	0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x1e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x79, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x4b,
	0x65, 0x79, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x22, 0x3e, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x1c, 0x4c, 0x61, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x17, 0x54, 0x72, 0x69, 0x65, 0x73, 0x54,
	0x6f, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xcc, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49,
	0x6e, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67,
	0x49, 0x6e, 0x74, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0xaa, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x3d, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0c,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x22, 0x55, 0x0a, 0x15,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x5f, 0x0a, 0x1d, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x4c, 0x0a, 0x2b, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x45, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x0a, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x7d, 0x0a,
	0x0e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x30, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x04, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x39,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x06, 0x61, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a,
	0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a,
	0x0a, 0x14, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67,
	0x49, 0x6e, 0x74, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x22, 0x44, 0x0a, 0x0e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x22, 0x79, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x86, 0x01,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x22, 0x4d, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x3c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x01,
	0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66,
	0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x94, 0x01, 0x0a, 0x16, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x66, 0x2e, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x27,
	0x0a, 0x09, 0x43, 0x75, 0x72, 0x76, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x50,
	0x32, 0x35, 0x36, 0x4b, 0x31, 0x10, 0x01, 0x2a, 0x2c, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x56, 0x31, 0x10, 0x00, 0x2a, 0xa9, 0x01, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x57,
	0x61, 0x73, 0x6d, 0x54, 0x72, 0x61, 0x70, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x61, 0x73,
	0x6d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x5f, 0x45, 0x56, 0x4d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x07, 0x2a, 0xed, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x49, 0x64, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x06, 0x2a, 0xbe, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x78, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x44, 0x6f,
	0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x61, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x10, 0x09, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x10,
	0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x10, 0x0d, 0x2a, 0x20, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x08, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x10, 0x01, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74,
	0x2f, 0x73, 0x66, 0x2d, 0x6e, 0x65, 0x61, 0x72, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f, 0x6e,
	0x65, 0x61, 0x72, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_near_codec_v1_codec_proto_rawDescOnce sync.Once
	file_sf_near_codec_v1_codec_proto_rawDescData = file_sf_near_codec_v1_codec_proto_rawDesc
)

func file_sf_near_codec_v1_codec_proto_rawDescGZIP() []byte {
	file_sf_near_codec_v1_codec_proto_rawDescOnce.Do(func() {
		file_sf_near_codec_v1_codec_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_near_codec_v1_codec_proto_rawDescData)
	})
	return file_sf_near_codec_v1_codec_proto_rawDescData
}

var file_sf_near_codec_v1_codec_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_sf_near_codec_v1_codec_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_sf_near_codec_v1_codec_proto_goTypes = []interface{}{
	(CurveKind)(0),                                          // 0: sf.near.codec.v1.CurveKind
	(ExecutionMetadata)(0),                                  // 1: sf.near.codec.v1.ExecutionMetadata
	(FunctionCallErrorSer)(0),                               // 2: sf.near.codec.v1.FunctionCallErrorSer
	(ReceiptValidationError)(0),                             // 3: sf.near.codec.v1.ReceiptValidationError
	(InvalidTxError)(0),                                     // 4: sf.near.codec.v1.InvalidTxError
	(Direction)(0),                                          // 5: sf.near.codec.v1.Direction
	(*Block)(nil),                                           // 6: sf.near.codec.v1.Block
	(*HeaderOnlyBlock)(nil),                                 // 7: sf.near.codec.v1.HeaderOnlyBlock
	(*StateChangeWithCause)(nil),                            // 8: sf.near.codec.v1.StateChangeWithCause
	(*StateChangeCause)(nil),                                // 9: sf.near.codec.v1.StateChangeCause
	(*StateChangeValue)(nil),                                // 10: sf.near.codec.v1.StateChangeValue
	(*Account)(nil),                                         // 11: sf.near.codec.v1.Account
	(*BlockHeader)(nil),                                     // 12: sf.near.codec.v1.BlockHeader
	(*BigInt)(nil),                                          // 13: sf.near.codec.v1.BigInt
	(*CryptoHash)(nil),                                      // 14: sf.near.codec.v1.CryptoHash
	(*Signature)(nil),                                       // 15: sf.near.codec.v1.Signature
	(*PublicKey)(nil),                                       // 16: sf.near.codec.v1.PublicKey
	(*ValidatorStake)(nil),                                  // 17: sf.near.codec.v1.ValidatorStake
	(*SlashedValidator)(nil),                                // 18: sf.near.codec.v1.SlashedValidator
	(*ChunkHeader)(nil),                                     // 19: sf.near.codec.v1.ChunkHeader
	(*IndexerShard)(nil),                                    // 20: sf.near.codec.v1.IndexerShard
	(*IndexerExecutionOutcomeWithReceipt)(nil),              // 21: sf.near.codec.v1.IndexerExecutionOutcomeWithReceipt
	(*IndexerChunk)(nil),                                    // 22: sf.near.codec.v1.IndexerChunk
	(*IndexerTransactionWithOutcome)(nil),                   // 23: sf.near.codec.v1.IndexerTransactionWithOutcome
	(*SignedTransaction)(nil),                               // 24: sf.near.codec.v1.SignedTransaction
	(*IndexerExecutionOutcomeWithOptionalReceipt)(nil),      // 25: sf.near.codec.v1.IndexerExecutionOutcomeWithOptionalReceipt
	(*Receipt)(nil),                                         // 26: sf.near.codec.v1.Receipt
	(*ReceiptData)(nil),                                     // 27: sf.near.codec.v1.ReceiptData
	(*ReceiptAction)(nil),                                   // 28: sf.near.codec.v1.ReceiptAction
	(*DataReceiver)(nil),                                    // 29: sf.near.codec.v1.DataReceiver
	(*ExecutionOutcomeWithId)(nil),                          // 30: sf.near.codec.v1.ExecutionOutcomeWithId
	(*ExecutionOutcome)(nil),                                // 31: sf.near.codec.v1.ExecutionOutcome
	(*SuccessValueExecutionStatus)(nil),                     // 32: sf.near.codec.v1.SuccessValueExecutionStatus
	(*SuccessReceiptIdExecutionStatus)(nil),                 // 33: sf.near.codec.v1.SuccessReceiptIdExecutionStatus
	(*UnknownExecutionStatus)(nil),                          // 34: sf.near.codec.v1.UnknownExecutionStatus
	(*FailureExecutionStatus)(nil),                          // 35: sf.near.codec.v1.FailureExecutionStatus
	(*ActionError)(nil),                                     // 36: sf.near.codec.v1.ActionError
	(*AccountAlreadyExistsErrorKind)(nil),                   // 37: sf.near.codec.v1.AccountAlreadyExistsErrorKind
	(*AccountDoesNotExistErrorKind)(nil),                    // 38: sf.near.codec.v1.AccountDoesNotExistErrorKind
	(*CreateAccountOnlyByRegistrarErrorKind)(nil),           // 39: sf.near.codec.v1.CreateAccountOnlyByRegistrarErrorKind
	(*CreateAccountNotAllowedErrorKind)(nil),                // 40: sf.near.codec.v1.CreateAccountNotAllowedErrorKind
	(*ActorNoPermissionErrorKind)(nil),                      // 41: sf.near.codec.v1.ActorNoPermissionErrorKind
	(*DeleteKeyDoesNotExistErrorKind)(nil),                  // 42: sf.near.codec.v1.DeleteKeyDoesNotExistErrorKind
	(*AddKeyAlreadyExistsErrorKind)(nil),                    // 43: sf.near.codec.v1.AddKeyAlreadyExistsErrorKind
	(*DeleteAccountStakingErrorKind)(nil),                   // 44: sf.near.codec.v1.DeleteAccountStakingErrorKind
	(*LackBalanceForStateErrorKind)(nil),                    // 45: sf.near.codec.v1.LackBalanceForStateErrorKind
	(*TriesToUnstakeErrorKind)(nil),                         // 46: sf.near.codec.v1.TriesToUnstakeErrorKind
	(*TriesToStakeErrorKind)(nil),                           // 47: sf.near.codec.v1.TriesToStakeErrorKind
	(*InsufficientStakeErrorKind)(nil),                      // 48: sf.near.codec.v1.InsufficientStakeErrorKind
	(*FunctionCallErrorKind)(nil),                           // 49: sf.near.codec.v1.FunctionCallErrorKind
	(*NewReceiptValidationErrorKind)(nil),                   // 50: sf.near.codec.v1.NewReceiptValidationErrorKind
	(*OnlyImplicitAccountCreationAllowedErrorKind)(nil),     // 51: sf.near.codec.v1.OnlyImplicitAccountCreationAllowedErrorKind
	(*DeleteAccountWithLargeStateErrorKind)(nil),            // 52: sf.near.codec.v1.DeleteAccountWithLargeStateErrorKind
	(*MerklePath)(nil),                                      // 53: sf.near.codec.v1.MerklePath
	(*MerklePathItem)(nil),                                  // 54: sf.near.codec.v1.MerklePathItem
	(*Action)(nil),                                          // 55: sf.near.codec.v1.Action
	(*CreateAccountAction)(nil),                             // 56: sf.near.codec.v1.CreateAccountAction
	(*DeployContractAction)(nil),                            // 57: sf.near.codec.v1.DeployContractAction
	(*FunctionCallAction)(nil),                              // 58: sf.near.codec.v1.FunctionCallAction
	(*TransferAction)(nil),                                  // 59: sf.near.codec.v1.TransferAction
	(*StakeAction)(nil),                                     // 60: sf.near.codec.v1.StakeAction
	(*AddKeyAction)(nil),                                    // 61: sf.near.codec.v1.AddKeyAction
	(*DeleteKeyAction)(nil),                                 // 62: sf.near.codec.v1.DeleteKeyAction
	(*DeleteAccountAction)(nil),                             // 63: sf.near.codec.v1.DeleteAccountAction
	(*AccessKey)(nil),                                       // 64: sf.near.codec.v1.AccessKey
	(*AccessKeyPermission)(nil),                             // 65: sf.near.codec.v1.AccessKeyPermission
	(*FunctionCallPermission)(nil),                          // 66: sf.near.codec.v1.FunctionCallPermission
	(*FullAccessPermission)(nil),                            // 67: sf.near.codec.v1.FullAccessPermission
	(*StateChangeCause_NotWritableToDisk)(nil),              // 68: sf.near.codec.v1.StateChangeCause.NotWritableToDisk
	(*StateChangeCause_InitialState)(nil),                   // 69: sf.near.codec.v1.StateChangeCause.InitialState
	(*StateChangeCause_TransactionProcessing)(nil),          // 70: sf.near.codec.v1.StateChangeCause.TransactionProcessing
	(*StateChangeCause_ActionReceiptProcessingStarted)(nil), // 71: sf.near.codec.v1.StateChangeCause.ActionReceiptProcessingStarted
	(*StateChangeCause_ActionReceiptGasReward)(nil),         // 72: sf.near.codec.v1.StateChangeCause.ActionReceiptGasReward
	(*StateChangeCause_ReceiptProcessing)(nil),              // 73: sf.near.codec.v1.StateChangeCause.ReceiptProcessing
	(*StateChangeCause_PostponedReceipt)(nil),               // 74: sf.near.codec.v1.StateChangeCause.PostponedReceipt
	(*StateChangeCause_UpdatedDelayedReceipts)(nil),         // 75: sf.near.codec.v1.StateChangeCause.UpdatedDelayedReceipts
	(*StateChangeCause_ValidatorAccountsUpdate)(nil),        // 76: sf.near.codec.v1.StateChangeCause.ValidatorAccountsUpdate
	(*StateChangeCause_Migration)(nil),                      // 77: sf.near.codec.v1.StateChangeCause.Migration
	(*StateChangeValue_AccountUpdate)(nil),                  // 78: sf.near.codec.v1.StateChangeValue.AccountUpdate
	(*StateChangeValue_AccountDeletion)(nil),                // 79: sf.near.codec.v1.StateChangeValue.AccountDeletion
	(*StateChangeValue_AccessKeyUpdate)(nil),                // 80: sf.near.codec.v1.StateChangeValue.AccessKeyUpdate
	(*StateChangeValue_AccessKeyDeletion)(nil),              // 81: sf.near.codec.v1.StateChangeValue.AccessKeyDeletion
	(*StateChangeValue_DataUpdate)(nil),                     // 82: sf.near.codec.v1.StateChangeValue.DataUpdate
	(*StateChangeValue_DataDeletion)(nil),                   // 83: sf.near.codec.v1.StateChangeValue.DataDeletion
	(*StateChangeValue_ContractCodeUpdate)(nil),             // 84: sf.near.codec.v1.StateChangeValue.ContractCodeUpdate
	(*StateChangeValue_ContractCodeDeletion)(nil),           // 85: sf.near.codec.v1.StateChangeValue.ContractCodeDeletion
}
var file_sf_near_codec_v1_codec_proto_depIdxs = []int32{
	12,  // 0: sf.near.codec.v1.Block.header:type_name -> sf.near.codec.v1.BlockHeader
	19,  // 1: sf.near.codec.v1.Block.chunk_headers:type_name -> sf.near.codec.v1.ChunkHeader
	20,  // 2: sf.near.codec.v1.Block.shards:type_name -> sf.near.codec.v1.IndexerShard
	8,   // 3: sf.near.codec.v1.Block.state_changes:type_name -> sf.near.codec.v1.StateChangeWithCause
	12,  // 4: sf.near.codec.v1.HeaderOnlyBlock.header:type_name -> sf.near.codec.v1.BlockHeader
	10,  // 5: sf.near.codec.v1.StateChangeWithCause.value:type_name -> sf.near.codec.v1.StateChangeValue
	9,   // 6: sf.near.codec.v1.StateChangeWithCause.cause:type_name -> sf.near.codec.v1.StateChangeCause
	68,  // 7: sf.near.codec.v1.StateChangeCause.not_writable_to_disk:type_name -> sf.near.codec.v1.StateChangeCause.NotWritableToDisk
	69,  // 8: sf.near.codec.v1.StateChangeCause.initial_state:type_name -> sf.near.codec.v1.StateChangeCause.InitialState
	70,  // 9: sf.near.codec.v1.StateChangeCause.transaction_processing:type_name -> sf.near.codec.v1.StateChangeCause.TransactionProcessing
	71,  // 10: sf.near.codec.v1.StateChangeCause.action_receipt_processing_started:type_name -> sf.near.codec.v1.StateChangeCause.ActionReceiptProcessingStarted
	72,  // 11: sf.near.codec.v1.StateChangeCause.action_receipt_gas_reward:type_name -> sf.near.codec.v1.StateChangeCause.ActionReceiptGasReward
	73,  // 12: sf.near.codec.v1.StateChangeCause.receipt_processing:type_name -> sf.near.codec.v1.StateChangeCause.ReceiptProcessing
	74,  // 13: sf.near.codec.v1.StateChangeCause.postponed_receipt:type_name -> sf.near.codec.v1.StateChangeCause.PostponedReceipt
	75,  // 14: sf.near.codec.v1.StateChangeCause.updated_delayed_receipts:type_name -> sf.near.codec.v1.StateChangeCause.UpdatedDelayedReceipts
	76,  // 15: sf.near.codec.v1.StateChangeCause.validator_accounts_update:type_name -> sf.near.codec.v1.StateChangeCause.ValidatorAccountsUpdate
	77,  // 16: sf.near.codec.v1.StateChangeCause.migration:type_name -> sf.near.codec.v1.StateChangeCause.Migration
	78,  // 17: sf.near.codec.v1.StateChangeValue.account_update:type_name -> sf.near.codec.v1.StateChangeValue.AccountUpdate
	79,  // 18: sf.near.codec.v1.StateChangeValue.account_deletion:type_name -> sf.near.codec.v1.StateChangeValue.AccountDeletion
	80,  // 19: sf.near.codec.v1.StateChangeValue.access_key_update:type_name -> sf.near.codec.v1.StateChangeValue.AccessKeyUpdate
	81,  // 20: sf.near.codec.v1.StateChangeValue.access_key_deletion:type_name -> sf.near.codec.v1.StateChangeValue.AccessKeyDeletion
	82,  // 21: sf.near.codec.v1.StateChangeValue.data_update:type_name -> sf.near.codec.v1.StateChangeValue.DataUpdate
	83,  // 22: sf.near.codec.v1.StateChangeValue.data_deletion:type_name -> sf.near.codec.v1.StateChangeValue.DataDeletion
	84,  // 23: sf.near.codec.v1.StateChangeValue.contract_code_update:type_name -> sf.near.codec.v1.StateChangeValue.ContractCodeUpdate
	85,  // 24: sf.near.codec.v1.StateChangeValue.contract_deletion:type_name -> sf.near.codec.v1.StateChangeValue.ContractCodeDeletion
	13,  // 25: sf.near.codec.v1.Account.amount:type_name -> sf.near.codec.v1.BigInt
	13,  // 26: sf.near.codec.v1.Account.locked:type_name -> sf.near.codec.v1.BigInt
	14,  // 27: sf.near.codec.v1.Account.code_hash:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 28: sf.near.codec.v1.BlockHeader.epoch_id:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 29: sf.near.codec.v1.BlockHeader.next_epoch_id:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 30: sf.near.codec.v1.BlockHeader.hash:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 31: sf.near.codec.v1.BlockHeader.prev_hash:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 32: sf.near.codec.v1.BlockHeader.prev_state_root:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 33: sf.near.codec.v1.BlockHeader.chunk_receipts_root:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 34: sf.near.codec.v1.BlockHeader.chunk_headers_root:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 35: sf.near.codec.v1.BlockHeader.chunk_tx_root:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 36: sf.near.codec.v1.BlockHeader.outcome_root:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 37: sf.near.codec.v1.BlockHeader.challenges_root:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 38: sf.near.codec.v1.BlockHeader.random_value:type_name -> sf.near.codec.v1.CryptoHash
	17,  // 39: sf.near.codec.v1.BlockHeader.validator_proposals:type_name -> sf.near.codec.v1.ValidatorStake
	13,  // 40: sf.near.codec.v1.BlockHeader.gas_price:type_name -> sf.near.codec.v1.BigInt
	13,  // 41: sf.near.codec.v1.BlockHeader.total_supply:type_name -> sf.near.codec.v1.BigInt
	18,  // 42: sf.near.codec.v1.BlockHeader.challenges_result:type_name -> sf.near.codec.v1.SlashedValidator
	14,  // 43: sf.near.codec.v1.BlockHeader.last_final_block:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 44: sf.near.codec.v1.BlockHeader.last_ds_final_block:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 45: sf.near.codec.v1.BlockHeader.next_bp_hash:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 46: sf.near.codec.v1.BlockHeader.block_merkle_root:type_name -> sf.near.codec.v1.CryptoHash
	15,  // 47: sf.near.codec.v1.BlockHeader.approvals:type_name -> sf.near.codec.v1.Signature
	15,  // 48: sf.near.codec.v1.BlockHeader.signature:type_name -> sf.near.codec.v1.Signature
	0,   // 49: sf.near.codec.v1.Signature.type:type_name -> sf.near.codec.v1.CurveKind
	0,   // 50: sf.near.codec.v1.PublicKey.type:type_name -> sf.near.codec.v1.CurveKind
	16,  // 51: sf.near.codec.v1.ValidatorStake.public_key:type_name -> sf.near.codec.v1.PublicKey
	13,  // 52: sf.near.codec.v1.ValidatorStake.stake:type_name -> sf.near.codec.v1.BigInt
	13,  // 53: sf.near.codec.v1.ChunkHeader.validator_reward:type_name -> sf.near.codec.v1.BigInt
	13,  // 54: sf.near.codec.v1.ChunkHeader.balance_burnt:type_name -> sf.near.codec.v1.BigInt
	17,  // 55: sf.near.codec.v1.ChunkHeader.validator_proposals:type_name -> sf.near.codec.v1.ValidatorStake
	15,  // 56: sf.near.codec.v1.ChunkHeader.signature:type_name -> sf.near.codec.v1.Signature
	22,  // 57: sf.near.codec.v1.IndexerShard.chunk:type_name -> sf.near.codec.v1.IndexerChunk
	21,  // 58: sf.near.codec.v1.IndexerShard.receipt_execution_outcomes:type_name -> sf.near.codec.v1.IndexerExecutionOutcomeWithReceipt
	30,  // 59: sf.near.codec.v1.IndexerExecutionOutcomeWithReceipt.execution_outcome:type_name -> sf.near.codec.v1.ExecutionOutcomeWithId
	26,  // 60: sf.near.codec.v1.IndexerExecutionOutcomeWithReceipt.receipt:type_name -> sf.near.codec.v1.Receipt
	19,  // 61: sf.near.codec.v1.IndexerChunk.header:type_name -> sf.near.codec.v1.ChunkHeader
	23,  // 62: sf.near.codec.v1.IndexerChunk.transactions:type_name -> sf.near.codec.v1.IndexerTransactionWithOutcome
	26,  // 63: sf.near.codec.v1.IndexerChunk.receipts:type_name -> sf.near.codec.v1.Receipt
	24,  // 64: sf.near.codec.v1.IndexerTransactionWithOutcome.transaction:type_name -> sf.near.codec.v1.SignedTransaction
	25,  // 65: sf.near.codec.v1.IndexerTransactionWithOutcome.outcome:type_name -> sf.near.codec.v1.IndexerExecutionOutcomeWithOptionalReceipt
	16,  // 66: sf.near.codec.v1.SignedTransaction.public_key:type_name -> sf.near.codec.v1.PublicKey
	55,  // 67: sf.near.codec.v1.SignedTransaction.actions:type_name -> sf.near.codec.v1.Action
	15,  // 68: sf.near.codec.v1.SignedTransaction.signature:type_name -> sf.near.codec.v1.Signature
	14,  // 69: sf.near.codec.v1.SignedTransaction.hash:type_name -> sf.near.codec.v1.CryptoHash
	30,  // 70: sf.near.codec.v1.IndexerExecutionOutcomeWithOptionalReceipt.execution_outcome:type_name -> sf.near.codec.v1.ExecutionOutcomeWithId
	26,  // 71: sf.near.codec.v1.IndexerExecutionOutcomeWithOptionalReceipt.receipt:type_name -> sf.near.codec.v1.Receipt
	14,  // 72: sf.near.codec.v1.Receipt.receipt_id:type_name -> sf.near.codec.v1.CryptoHash
	28,  // 73: sf.near.codec.v1.Receipt.action:type_name -> sf.near.codec.v1.ReceiptAction
	27,  // 74: sf.near.codec.v1.Receipt.data:type_name -> sf.near.codec.v1.ReceiptData
	14,  // 75: sf.near.codec.v1.ReceiptData.data_id:type_name -> sf.near.codec.v1.CryptoHash
	16,  // 76: sf.near.codec.v1.ReceiptAction.signer_public_key:type_name -> sf.near.codec.v1.PublicKey
	13,  // 77: sf.near.codec.v1.ReceiptAction.gas_price:type_name -> sf.near.codec.v1.BigInt
	29,  // 78: sf.near.codec.v1.ReceiptAction.output_data_receivers:type_name -> sf.near.codec.v1.DataReceiver
	14,  // 79: sf.near.codec.v1.ReceiptAction.input_data_ids:type_name -> sf.near.codec.v1.CryptoHash
	55,  // 80: sf.near.codec.v1.ReceiptAction.actions:type_name -> sf.near.codec.v1.Action
	14,  // 81: sf.near.codec.v1.DataReceiver.data_id:type_name -> sf.near.codec.v1.CryptoHash
	53,  // 82: sf.near.codec.v1.ExecutionOutcomeWithId.proof:type_name -> sf.near.codec.v1.MerklePath
	14,  // 83: sf.near.codec.v1.ExecutionOutcomeWithId.block_hash:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 84: sf.near.codec.v1.ExecutionOutcomeWithId.id:type_name -> sf.near.codec.v1.CryptoHash
	31,  // 85: sf.near.codec.v1.ExecutionOutcomeWithId.outcome:type_name -> sf.near.codec.v1.ExecutionOutcome
	14,  // 86: sf.near.codec.v1.ExecutionOutcome.receipt_ids:type_name -> sf.near.codec.v1.CryptoHash
	13,  // 87: sf.near.codec.v1.ExecutionOutcome.tokens_burnt:type_name -> sf.near.codec.v1.BigInt
	34,  // 88: sf.near.codec.v1.ExecutionOutcome.unknown:type_name -> sf.near.codec.v1.UnknownExecutionStatus
	35,  // 89: sf.near.codec.v1.ExecutionOutcome.failure:type_name -> sf.near.codec.v1.FailureExecutionStatus
	32,  // 90: sf.near.codec.v1.ExecutionOutcome.success_value:type_name -> sf.near.codec.v1.SuccessValueExecutionStatus
	33,  // 91: sf.near.codec.v1.ExecutionOutcome.success_receipt_id:type_name -> sf.near.codec.v1.SuccessReceiptIdExecutionStatus
	1,   // 92: sf.near.codec.v1.ExecutionOutcome.metadata:type_name -> sf.near.codec.v1.ExecutionMetadata
	14,  // 93: sf.near.codec.v1.SuccessReceiptIdExecutionStatus.id:type_name -> sf.near.codec.v1.CryptoHash
	36,  // 94: sf.near.codec.v1.FailureExecutionStatus.action_error:type_name -> sf.near.codec.v1.ActionError
	4,   // 95: sf.near.codec.v1.FailureExecutionStatus.invalid_tx_error:type_name -> sf.near.codec.v1.InvalidTxError
	37,  // 96: sf.near.codec.v1.ActionError.account_already_exist:type_name -> sf.near.codec.v1.AccountAlreadyExistsErrorKind
	38,  // 97: sf.near.codec.v1.ActionError.account_does_not_exist:type_name -> sf.near.codec.v1.AccountDoesNotExistErrorKind
	39,  // 98: sf.near.codec.v1.ActionError.create_account_only_by_registrar:type_name -> sf.near.codec.v1.CreateAccountOnlyByRegistrarErrorKind
	40,  // 99: sf.near.codec.v1.ActionError.create_account_not_allowed:type_name -> sf.near.codec.v1.CreateAccountNotAllowedErrorKind
	41,  // 100: sf.near.codec.v1.ActionError.actor_no_permission:type_name -> sf.near.codec.v1.ActorNoPermissionErrorKind
	42,  // 101: sf.near.codec.v1.ActionError.delete_key_does_not_exist:type_name -> sf.near.codec.v1.DeleteKeyDoesNotExistErrorKind
	43,  // 102: sf.near.codec.v1.ActionError.add_key_already_exists:type_name -> sf.near.codec.v1.AddKeyAlreadyExistsErrorKind
	44,  // 103: sf.near.codec.v1.ActionError.delete_account_staking:type_name -> sf.near.codec.v1.DeleteAccountStakingErrorKind
	45,  // 104: sf.near.codec.v1.ActionError.lack_balance_for_state:type_name -> sf.near.codec.v1.LackBalanceForStateErrorKind
	46,  // 105: sf.near.codec.v1.ActionError.tries_to_unstake:type_name -> sf.near.codec.v1.TriesToUnstakeErrorKind
	47,  // 106: sf.near.codec.v1.ActionError.tries_to_stake:type_name -> sf.near.codec.v1.TriesToStakeErrorKind
	48,  // 107: sf.near.codec.v1.ActionError.insufficient_stake:type_name -> sf.near.codec.v1.InsufficientStakeErrorKind
	49,  // 108: sf.near.codec.v1.ActionError.function_call:type_name -> sf.near.codec.v1.FunctionCallErrorKind
	50,  // 109: sf.near.codec.v1.ActionError.new_receipt_validation:type_name -> sf.near.codec.v1.NewReceiptValidationErrorKind
	51,  // 110: sf.near.codec.v1.ActionError.only_implicit_account_creation_allowed:type_name -> sf.near.codec.v1.OnlyImplicitAccountCreationAllowedErrorKind
	52,  // 111: sf.near.codec.v1.ActionError.delete_account_with_large_state:type_name -> sf.near.codec.v1.DeleteAccountWithLargeStateErrorKind
	16,  // 112: sf.near.codec.v1.DeleteKeyDoesNotExistErrorKind.public_key:type_name -> sf.near.codec.v1.PublicKey
	16,  // 113: sf.near.codec.v1.AddKeyAlreadyExistsErrorKind.public_key:type_name -> sf.near.codec.v1.PublicKey
	13,  // 114: sf.near.codec.v1.LackBalanceForStateErrorKind.balance:type_name -> sf.near.codec.v1.BigInt
	13,  // 115: sf.near.codec.v1.TriesToStakeErrorKind.stake:type_name -> sf.near.codec.v1.BigInt
	13,  // 116: sf.near.codec.v1.TriesToStakeErrorKind.locked:type_name -> sf.near.codec.v1.BigInt
	13,  // 117: sf.near.codec.v1.TriesToStakeErrorKind.balance:type_name -> sf.near.codec.v1.BigInt
	13,  // 118: sf.near.codec.v1.InsufficientStakeErrorKind.stake:type_name -> sf.near.codec.v1.BigInt
	13,  // 119: sf.near.codec.v1.InsufficientStakeErrorKind.minimum_stake:type_name -> sf.near.codec.v1.BigInt
	2,   // 120: sf.near.codec.v1.FunctionCallErrorKind.error:type_name -> sf.near.codec.v1.FunctionCallErrorSer
	3,   // 121: sf.near.codec.v1.NewReceiptValidationErrorKind.error:type_name -> sf.near.codec.v1.ReceiptValidationError
	54,  // 122: sf.near.codec.v1.MerklePath.path:type_name -> sf.near.codec.v1.MerklePathItem
	14,  // 123: sf.near.codec.v1.MerklePathItem.hash:type_name -> sf.near.codec.v1.CryptoHash
	5,   // 124: sf.near.codec.v1.MerklePathItem.direction:type_name -> sf.near.codec.v1.Direction
	56,  // 125: sf.near.codec.v1.Action.create_account:type_name -> sf.near.codec.v1.CreateAccountAction
	57,  // 126: sf.near.codec.v1.Action.deploy_contract:type_name -> sf.near.codec.v1.DeployContractAction
	58,  // 127: sf.near.codec.v1.Action.function_call:type_name -> sf.near.codec.v1.FunctionCallAction
	59,  // 128: sf.near.codec.v1.Action.transfer:type_name -> sf.near.codec.v1.TransferAction
	60,  // 129: sf.near.codec.v1.Action.stake:type_name -> sf.near.codec.v1.StakeAction
	61,  // 130: sf.near.codec.v1.Action.add_key:type_name -> sf.near.codec.v1.AddKeyAction
	62,  // 131: sf.near.codec.v1.Action.delete_key:type_name -> sf.near.codec.v1.DeleteKeyAction
	63,  // 132: sf.near.codec.v1.Action.delete_account:type_name -> sf.near.codec.v1.DeleteAccountAction
	13,  // 133: sf.near.codec.v1.FunctionCallAction.deposit:type_name -> sf.near.codec.v1.BigInt
	13,  // 134: sf.near.codec.v1.TransferAction.deposit:type_name -> sf.near.codec.v1.BigInt
	13,  // 135: sf.near.codec.v1.StakeAction.stake:type_name -> sf.near.codec.v1.BigInt
	16,  // 136: sf.near.codec.v1.StakeAction.public_key:type_name -> sf.near.codec.v1.PublicKey
	16,  // 137: sf.near.codec.v1.AddKeyAction.public_key:type_name -> sf.near.codec.v1.PublicKey
	64,  // 138: sf.near.codec.v1.AddKeyAction.access_key:type_name -> sf.near.codec.v1.AccessKey
	16,  // 139: sf.near.codec.v1.DeleteKeyAction.public_key:type_name -> sf.near.codec.v1.PublicKey
	65,  // 140: sf.near.codec.v1.AccessKey.permission:type_name -> sf.near.codec.v1.AccessKeyPermission
	66,  // 141: sf.near.codec.v1.AccessKeyPermission.function_call:type_name -> sf.near.codec.v1.FunctionCallPermission
	67,  // 142: sf.near.codec.v1.AccessKeyPermission.full_access:type_name -> sf.near.codec.v1.FullAccessPermission
	13,  // 143: sf.near.codec.v1.FunctionCallPermission.allowance:type_name -> sf.near.codec.v1.BigInt
	14,  // 144: sf.near.codec.v1.StateChangeCause.TransactionProcessing.tx_hash:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 145: sf.near.codec.v1.StateChangeCause.ActionReceiptProcessingStarted.receipt_hash:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 146: sf.near.codec.v1.StateChangeCause.ActionReceiptGasReward.tx_hash:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 147: sf.near.codec.v1.StateChangeCause.ReceiptProcessing.tx_hash:type_name -> sf.near.codec.v1.CryptoHash
	14,  // 148: sf.near.codec.v1.StateChangeCause.PostponedReceipt.tx_hash:type_name -> sf.near.codec.v1.CryptoHash
	11,  // 149: sf.near.codec.v1.StateChangeValue.AccountUpdate.account:type_name -> sf.near.codec.v1.Account
	16,  // 150: sf.near.codec.v1.StateChangeValue.AccessKeyUpdate.public_key:type_name -> sf.near.codec.v1.PublicKey
	64,  // 151: sf.near.codec.v1.StateChangeValue.AccessKeyUpdate.access_key:type_name -> sf.near.codec.v1.AccessKey
	16,  // 152: sf.near.codec.v1.StateChangeValue.AccessKeyDeletion.public_key:type_name -> sf.near.codec.v1.PublicKey
	153, // [153:153] is the sub-list for method output_type
	153, // [153:153] is the sub-list for method input_type
	153, // [153:153] is the sub-list for extension type_name
	153, // [153:153] is the sub-list for extension extendee
	0,   // [0:153] is the sub-list for field type_name
}

func init() { file_sf_near_codec_v1_codec_proto_init() }
func file_sf_near_codec_v1_codec_proto_init() {
	if File_sf_near_codec_v1_codec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_near_codec_v1_codec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderOnlyBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeWithCause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeCause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlashedValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexerShard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexerExecutionOutcomeWithReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexerChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexerTransactionWithOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexerExecutionOutcomeWithOptionalReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Receipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataReceiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionOutcomeWithId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessValueExecutionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessReceiptIdExecutionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownExecutionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureExecutionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAlreadyExistsErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountDoesNotExistErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountOnlyByRegistrarErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountNotAllowedErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorNoPermissionErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyDoesNotExistErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKeyAlreadyExistsErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountStakingErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LackBalanceForStateErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriesToUnstakeErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriesToStakeErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsufficientStakeErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionCallErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewReceiptValidationErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlyImplicitAccountCreationAllowedErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountWithLargeStateErrorKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerklePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerklePathItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployContractAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKeyAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessKeyPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionCallPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullAccessPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeCause_NotWritableToDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeCause_InitialState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeCause_TransactionProcessing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeCause_ActionReceiptProcessingStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeCause_ActionReceiptGasReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeCause_ReceiptProcessing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeCause_PostponedReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeCause_UpdatedDelayedReceipts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeCause_ValidatorAccountsUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeCause_Migration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeValue_AccountUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeValue_AccountDeletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeValue_AccessKeyUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeValue_AccessKeyDeletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeValue_DataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeValue_DataDeletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeValue_ContractCodeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_near_codec_v1_codec_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChangeValue_ContractCodeDeletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sf_near_codec_v1_codec_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*StateChangeCause_NotWritableToDisk_)(nil),
		(*StateChangeCause_InitialState_)(nil),
		(*StateChangeCause_TransactionProcessing_)(nil),
		(*StateChangeCause_ActionReceiptProcessingStarted_)(nil),
		(*StateChangeCause_ActionReceiptGasReward_)(nil),
		(*StateChangeCause_ReceiptProcessing_)(nil),
		(*StateChangeCause_PostponedReceipt_)(nil),
		(*StateChangeCause_UpdatedDelayedReceipts_)(nil),
		(*StateChangeCause_ValidatorAccountsUpdate_)(nil),
		(*StateChangeCause_Migration_)(nil),
	}
	file_sf_near_codec_v1_codec_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*StateChangeValue_AccountUpdate_)(nil),
		(*StateChangeValue_AccountDeletion_)(nil),
		(*StateChangeValue_AccessKeyUpdate_)(nil),
		(*StateChangeValue_AccessKeyDeletion_)(nil),
		(*StateChangeValue_DataUpdate_)(nil),
		(*StateChangeValue_DataDeletion_)(nil),
		(*StateChangeValue_ContractCodeUpdate_)(nil),
		(*StateChangeValue_ContractDeletion)(nil),
	}
	file_sf_near_codec_v1_codec_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Receipt_Action)(nil),
		(*Receipt_Data)(nil),
	}
	file_sf_near_codec_v1_codec_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*ExecutionOutcome_Unknown)(nil),
		(*ExecutionOutcome_Failure)(nil),
		(*ExecutionOutcome_SuccessValue)(nil),
		(*ExecutionOutcome_SuccessReceiptId)(nil),
	}
	file_sf_near_codec_v1_codec_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*FailureExecutionStatus_ActionError)(nil),
		(*FailureExecutionStatus_InvalidTxError)(nil),
	}
	file_sf_near_codec_v1_codec_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*ActionError_AccountAlreadyExist)(nil),
		(*ActionError_AccountDoesNotExist)(nil),
		(*ActionError_CreateAccountOnlyByRegistrar)(nil),
		(*ActionError_CreateAccountNotAllowed)(nil),
		(*ActionError_ActorNoPermission)(nil),
		(*ActionError_DeleteKeyDoesNotExist)(nil),
		(*ActionError_AddKeyAlreadyExists)(nil),
		(*ActionError_DeleteAccountStaking)(nil),
		(*ActionError_LackBalanceForState)(nil),
		(*ActionError_TriesToUnstake)(nil),
		(*ActionError_TriesToStake)(nil),
		(*ActionError_InsufficientStake)(nil),
		(*ActionError_FunctionCall)(nil),
		(*ActionError_NewReceiptValidation)(nil),
		(*ActionError_OnlyImplicitAccountCreationAllowed)(nil),
		(*ActionError_DeleteAccountWithLargeState)(nil),
	}
	file_sf_near_codec_v1_codec_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*Action_CreateAccount)(nil),
		(*Action_DeployContract)(nil),
		(*Action_FunctionCall)(nil),
		(*Action_Transfer)(nil),
		(*Action_Stake)(nil),
		(*Action_AddKey)(nil),
		(*Action_DeleteKey)(nil),
		(*Action_DeleteAccount)(nil),
	}
	file_sf_near_codec_v1_codec_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*AccessKeyPermission_FunctionCall)(nil),
		(*AccessKeyPermission_FullAccess)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_near_codec_v1_codec_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   80,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_near_codec_v1_codec_proto_goTypes,
		DependencyIndexes: file_sf_near_codec_v1_codec_proto_depIdxs,
		EnumInfos:         file_sf_near_codec_v1_codec_proto_enumTypes,
		MessageInfos:      file_sf_near_codec_v1_codec_proto_msgTypes,
	}.Build()
	File_sf_near_codec_v1_codec_proto = out.File
	file_sf_near_codec_v1_codec_proto_rawDesc = nil
	file_sf_near_codec_v1_codec_proto_goTypes = nil
	file_sf_near_codec_v1_codec_proto_depIdxs = nil
}
