// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: sf/ethereum/codec/v1/codec.proto

package pbcodec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionTraceStatus int32

const (
	TransactionTraceStatus_UNKNOWN   TransactionTraceStatus = 0
	TransactionTraceStatus_SUCCEEDED TransactionTraceStatus = 1
	TransactionTraceStatus_FAILED    TransactionTraceStatus = 2
	TransactionTraceStatus_REVERTED  TransactionTraceStatus = 3
)

// Enum value maps for TransactionTraceStatus.
var (
	TransactionTraceStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SUCCEEDED",
		2: "FAILED",
		3: "REVERTED",
	}
	TransactionTraceStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"SUCCEEDED": 1,
		"FAILED":    2,
		"REVERTED":  3,
	}
)

func (x TransactionTraceStatus) Enum() *TransactionTraceStatus {
	p := new(TransactionTraceStatus)
	*p = x
	return p
}

func (x TransactionTraceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionTraceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_ethereum_codec_v1_codec_proto_enumTypes[0].Descriptor()
}

func (TransactionTraceStatus) Type() protoreflect.EnumType {
	return &file_sf_ethereum_codec_v1_codec_proto_enumTypes[0]
}

func (x TransactionTraceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionTraceStatus.Descriptor instead.
func (TransactionTraceStatus) EnumDescriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{0}
}

type CallType int32

const (
	CallType_UNSPECIFIED CallType = 0
	CallType_CALL        CallType = 1 // direct? what's the name for `Call` alone?
	CallType_CALLCODE    CallType = 2
	CallType_DELEGATE    CallType = 3
	CallType_STATIC      CallType = 4
	CallType_CREATE      CallType = 5 // create2 ? any other form of calls?
)

// Enum value maps for CallType.
var (
	CallType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CALL",
		2: "CALLCODE",
		3: "DELEGATE",
		4: "STATIC",
		5: "CREATE",
	}
	CallType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CALL":        1,
		"CALLCODE":    2,
		"DELEGATE":    3,
		"STATIC":      4,
		"CREATE":      5,
	}
)

func (x CallType) Enum() *CallType {
	p := new(CallType)
	*p = x
	return p
}

func (x CallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallType) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_ethereum_codec_v1_codec_proto_enumTypes[1].Descriptor()
}

func (CallType) Type() protoreflect.EnumType {
	return &file_sf_ethereum_codec_v1_codec_proto_enumTypes[1]
}

func (x CallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallType.Descriptor instead.
func (CallType) EnumDescriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{1}
}

type TransactionState_Transition int32

const (
	TransactionState_TRANS_INIT                   TransactionState_Transition = 0
	TransactionState_TRANS_POOLED                 TransactionState_Transition = 1
	TransactionState_TRANS_MINED                  TransactionState_Transition = 2
	TransactionState_TRANS_FORKED                 TransactionState_Transition = 3
	TransactionState_TRANS_CONFIRMED              TransactionState_Transition = 4
	TransactionState_TRANS_REPLACED               TransactionState_Transition = 5
	TransactionState_TRANS_SPECULATIVELY_EXECUTED TransactionState_Transition = 6 // makes speculative traces available on a PENDING transaction. May not be emitted if the transaction is seen a block before
)

// Enum value maps for TransactionState_Transition.
var (
	TransactionState_Transition_name = map[int32]string{
		0: "TRANS_INIT",
		1: "TRANS_POOLED",
		2: "TRANS_MINED",
		3: "TRANS_FORKED",
		4: "TRANS_CONFIRMED",
		5: "TRANS_REPLACED",
		6: "TRANS_SPECULATIVELY_EXECUTED",
	}
	TransactionState_Transition_value = map[string]int32{
		"TRANS_INIT":                   0,
		"TRANS_POOLED":                 1,
		"TRANS_MINED":                  2,
		"TRANS_FORKED":                 3,
		"TRANS_CONFIRMED":              4,
		"TRANS_REPLACED":               5,
		"TRANS_SPECULATIVELY_EXECUTED": 6,
	}
)

func (x TransactionState_Transition) Enum() *TransactionState_Transition {
	p := new(TransactionState_Transition)
	*p = x
	return p
}

func (x TransactionState_Transition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionState_Transition) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_ethereum_codec_v1_codec_proto_enumTypes[2].Descriptor()
}

func (TransactionState_Transition) Type() protoreflect.EnumType {
	return &file_sf_ethereum_codec_v1_codec_proto_enumTypes[2]
}

func (x TransactionState_Transition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionState_Transition.Descriptor instead.
func (TransactionState_Transition) EnumDescriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{8, 0}
}

type TransactionState_State int32

const (
	TransactionState_STATE_UNKNOWN  TransactionState_State = 0
	TransactionState_STATE_PENDING  TransactionState_State = 1
	TransactionState_STATE_IN_BLOCK TransactionState_State = 2
	TransactionState_STATE_REPLACED TransactionState_State = 3
)

// Enum value maps for TransactionState_State.
var (
	TransactionState_State_name = map[int32]string{
		0: "STATE_UNKNOWN",
		1: "STATE_PENDING",
		2: "STATE_IN_BLOCK",
		3: "STATE_REPLACED",
	}
	TransactionState_State_value = map[string]int32{
		"STATE_UNKNOWN":  0,
		"STATE_PENDING":  1,
		"STATE_IN_BLOCK": 2,
		"STATE_REPLACED": 3,
	}
)

func (x TransactionState_State) Enum() *TransactionState_State {
	p := new(TransactionState_State)
	*p = x
	return p
}

func (x TransactionState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_ethereum_codec_v1_codec_proto_enumTypes[3].Descriptor()
}

func (TransactionState_State) Type() protoreflect.EnumType {
	return &file_sf_ethereum_codec_v1_codec_proto_enumTypes[3]
}

func (x TransactionState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionState_State.Descriptor instead.
func (TransactionState_State) EnumDescriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{8, 1}
}

// Obtain all balanche change reasons under deep mind repository:
//
// ```shell
// ack -ho 'BalanceChangeReason\(".*"\)' | grep -Eo '".*"' | sort | uniq
// ```
type BalanceChange_Reason int32

const (
	BalanceChange_REASON_UNKNOWN                BalanceChange_Reason = 0
	BalanceChange_REASON_REWARD_MINE_UNCLE      BalanceChange_Reason = 1
	BalanceChange_REASON_REWARD_MINE_BLOCK      BalanceChange_Reason = 2
	BalanceChange_REASON_DAO_REFUND_CONTRACT    BalanceChange_Reason = 3
	BalanceChange_REASON_DAO_ADJUST_BALANCE     BalanceChange_Reason = 4
	BalanceChange_REASON_TRANSFER               BalanceChange_Reason = 5
	BalanceChange_REASON_GENESIS_BALANCE        BalanceChange_Reason = 6
	BalanceChange_REASON_GAS_BUY                BalanceChange_Reason = 7
	BalanceChange_REASON_REWARD_TRANSACTION_FEE BalanceChange_Reason = 8
	BalanceChange_REASON_REWARD_FEE_RESET       BalanceChange_Reason = 14
	BalanceChange_REASON_GAS_REFUND             BalanceChange_Reason = 9
	BalanceChange_REASON_TOUCH_ACCOUNT          BalanceChange_Reason = 10
	BalanceChange_REASON_SUICIDE_REFUND         BalanceChange_Reason = 11
	BalanceChange_REASON_SUICIDE_WITHDRAW       BalanceChange_Reason = 13
	BalanceChange_REASON_CALL_BALANCE_OVERRIDE  BalanceChange_Reason = 12
	// Used on chain(s) where some Ether burning happens
	BalanceChange_REASON_BURN BalanceChange_Reason = 15
)

// Enum value maps for BalanceChange_Reason.
var (
	BalanceChange_Reason_name = map[int32]string{
		0:  "REASON_UNKNOWN",
		1:  "REASON_REWARD_MINE_UNCLE",
		2:  "REASON_REWARD_MINE_BLOCK",
		3:  "REASON_DAO_REFUND_CONTRACT",
		4:  "REASON_DAO_ADJUST_BALANCE",
		5:  "REASON_TRANSFER",
		6:  "REASON_GENESIS_BALANCE",
		7:  "REASON_GAS_BUY",
		8:  "REASON_REWARD_TRANSACTION_FEE",
		14: "REASON_REWARD_FEE_RESET",
		9:  "REASON_GAS_REFUND",
		10: "REASON_TOUCH_ACCOUNT",
		11: "REASON_SUICIDE_REFUND",
		13: "REASON_SUICIDE_WITHDRAW",
		12: "REASON_CALL_BALANCE_OVERRIDE",
		15: "REASON_BURN",
	}
	BalanceChange_Reason_value = map[string]int32{
		"REASON_UNKNOWN":                0,
		"REASON_REWARD_MINE_UNCLE":      1,
		"REASON_REWARD_MINE_BLOCK":      2,
		"REASON_DAO_REFUND_CONTRACT":    3,
		"REASON_DAO_ADJUST_BALANCE":     4,
		"REASON_TRANSFER":               5,
		"REASON_GENESIS_BALANCE":        6,
		"REASON_GAS_BUY":                7,
		"REASON_REWARD_TRANSACTION_FEE": 8,
		"REASON_REWARD_FEE_RESET":       14,
		"REASON_GAS_REFUND":             9,
		"REASON_TOUCH_ACCOUNT":          10,
		"REASON_SUICIDE_REFUND":         11,
		"REASON_SUICIDE_WITHDRAW":       13,
		"REASON_CALL_BALANCE_OVERRIDE":  12,
		"REASON_BURN":                   15,
	}
)

func (x BalanceChange_Reason) Enum() *BalanceChange_Reason {
	p := new(BalanceChange_Reason)
	*p = x
	return p
}

func (x BalanceChange_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalanceChange_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_ethereum_codec_v1_codec_proto_enumTypes[4].Descriptor()
}

func (BalanceChange_Reason) Type() protoreflect.EnumType {
	return &file_sf_ethereum_codec_v1_codec_proto_enumTypes[4]
}

func (x BalanceChange_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BalanceChange_Reason.Descriptor instead.
func (BalanceChange_Reason) EnumDescriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{18, 0}
}

// Obtain all gas change reasons under deep mind repository:
//
// ```shell
// ack -ho 'GasChangeReason\(".*"\)' | grep -Eo '".*"' | sort | uniq
// ```
type GasChange_Reason int32

const (
	GasChange_REASON_UNKNOWN                GasChange_Reason = 0
	GasChange_REASON_CALL                   GasChange_Reason = 1
	GasChange_REASON_CALL_CODE              GasChange_Reason = 2
	GasChange_REASON_CALL_DATA_COPY         GasChange_Reason = 3
	GasChange_REASON_CODE_COPY              GasChange_Reason = 4
	GasChange_REASON_CODE_STORAGE           GasChange_Reason = 5
	GasChange_REASON_CONTRACT_CREATION      GasChange_Reason = 6
	GasChange_REASON_CONTRACT_CREATION2     GasChange_Reason = 7
	GasChange_REASON_DELEGATE_CALL          GasChange_Reason = 8
	GasChange_REASON_EVENT_LOG              GasChange_Reason = 9
	GasChange_REASON_EXT_CODE_COPY          GasChange_Reason = 10
	GasChange_REASON_FAILED_EXECUTION       GasChange_Reason = 11
	GasChange_REASON_INTRINSIC_GAS          GasChange_Reason = 12
	GasChange_REASON_PRECOMPILED_CONTRACT   GasChange_Reason = 13
	GasChange_REASON_REFUND_AFTER_EXECUTION GasChange_Reason = 14
	GasChange_REASON_RETURN                 GasChange_Reason = 15
	GasChange_REASON_RETURN_DATA_COPY       GasChange_Reason = 16
	GasChange_REASON_REVERT                 GasChange_Reason = 17
	GasChange_REASON_SELF_DESTRUCT          GasChange_Reason = 18
	GasChange_REASON_STATIC_CALL            GasChange_Reason = 19
	// Added in Berlin fork (Geth 1.10+)
	GasChange_REASON_STATE_COLD_ACCESS GasChange_Reason = 20
)

// Enum value maps for GasChange_Reason.
var (
	GasChange_Reason_name = map[int32]string{
		0:  "REASON_UNKNOWN",
		1:  "REASON_CALL",
		2:  "REASON_CALL_CODE",
		3:  "REASON_CALL_DATA_COPY",
		4:  "REASON_CODE_COPY",
		5:  "REASON_CODE_STORAGE",
		6:  "REASON_CONTRACT_CREATION",
		7:  "REASON_CONTRACT_CREATION2",
		8:  "REASON_DELEGATE_CALL",
		9:  "REASON_EVENT_LOG",
		10: "REASON_EXT_CODE_COPY",
		11: "REASON_FAILED_EXECUTION",
		12: "REASON_INTRINSIC_GAS",
		13: "REASON_PRECOMPILED_CONTRACT",
		14: "REASON_REFUND_AFTER_EXECUTION",
		15: "REASON_RETURN",
		16: "REASON_RETURN_DATA_COPY",
		17: "REASON_REVERT",
		18: "REASON_SELF_DESTRUCT",
		19: "REASON_STATIC_CALL",
		20: "REASON_STATE_COLD_ACCESS",
	}
	GasChange_Reason_value = map[string]int32{
		"REASON_UNKNOWN":                0,
		"REASON_CALL":                   1,
		"REASON_CALL_CODE":              2,
		"REASON_CALL_DATA_COPY":         3,
		"REASON_CODE_COPY":              4,
		"REASON_CODE_STORAGE":           5,
		"REASON_CONTRACT_CREATION":      6,
		"REASON_CONTRACT_CREATION2":     7,
		"REASON_DELEGATE_CALL":          8,
		"REASON_EVENT_LOG":              9,
		"REASON_EXT_CODE_COPY":          10,
		"REASON_FAILED_EXECUTION":       11,
		"REASON_INTRINSIC_GAS":          12,
		"REASON_PRECOMPILED_CONTRACT":   13,
		"REASON_REFUND_AFTER_EXECUTION": 14,
		"REASON_RETURN":                 15,
		"REASON_RETURN_DATA_COPY":       16,
		"REASON_REVERT":                 17,
		"REASON_SELF_DESTRUCT":          18,
		"REASON_STATIC_CALL":            19,
		"REASON_STATE_COLD_ACCESS":      20,
	}
)

func (x GasChange_Reason) Enum() *GasChange_Reason {
	p := new(GasChange_Reason)
	*p = x
	return p
}

func (x GasChange_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GasChange_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_ethereum_codec_v1_codec_proto_enumTypes[5].Descriptor()
}

func (GasChange_Reason) Type() protoreflect.EnumType {
	return &file_sf_ethereum_codec_v1_codec_proto_enumTypes[5]
}

func (x GasChange_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GasChange_Reason.Descriptor instead.
func (GasChange_Reason) EnumDescriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{21, 0}
}

// Obtain all gas change reasons under deep mind repository:
//
// ```shell
// ack -ho 'GasEventID\(".*"\)' | grep -Eo '".*"' | sort | uniq
// ```
type GasEvent_Id int32

const (
	GasEvent_ID_UNKNOWN     GasEvent_Id = 0
	GasEvent_ID_AFTER_CALL  GasEvent_Id = 1
	GasEvent_ID_BEFORE_CALL GasEvent_Id = 2
)

// Enum value maps for GasEvent_Id.
var (
	GasEvent_Id_name = map[int32]string{
		0: "ID_UNKNOWN",
		1: "ID_AFTER_CALL",
		2: "ID_BEFORE_CALL",
	}
	GasEvent_Id_value = map[string]int32{
		"ID_UNKNOWN":     0,
		"ID_AFTER_CALL":  1,
		"ID_BEFORE_CALL": 2,
	}
)

func (x GasEvent_Id) Enum() *GasEvent_Id {
	p := new(GasEvent_Id)
	*p = x
	return p
}

func (x GasEvent_Id) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GasEvent_Id) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_ethereum_codec_v1_codec_proto_enumTypes[6].Descriptor()
}

func (GasEvent_Id) Type() protoreflect.EnumType {
	return &file_sf_ethereum_codec_v1_codec_proto_enumTypes[6]
}

func (x GasEvent_Id) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GasEvent_Id.Descriptor instead.
func (GasEvent_Id) EnumDescriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{22, 0}
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ver               int32               `protobuf:"varint,1,opt,name=ver,proto3" json:"ver,omitempty"`
	Hash              []byte              `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Number            uint64              `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Size              uint64              `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Header            *BlockHeader        `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
	Uncles            []*BlockHeader      `protobuf:"bytes,6,rep,name=uncles,proto3" json:"uncles,omitempty"`
	TransactionTraces []*TransactionTrace `protobuf:"bytes,10,rep,name=transaction_traces,json=transactionTraces,proto3" json:"transaction_traces,omitempty"`
	BalanceChanges    []*BalanceChange    `protobuf:"bytes,11,rep,name=balance_changes,json=balanceChanges,proto3" json:"balance_changes,omitempty"`
	CodeChanges       []*CodeChange       `protobuf:"bytes,20,rep,name=code_changes,json=codeChanges,proto3" json:"code_changes,omitempty"`
	// Wheter or not a filtering process was run on this block. The filtering process populated the
	// `transaction_traces` according to the `filtering_include_filter_expr` and
	// `filtering_exclude_filter_expr` CEL expressions. A transaction will be present in the `transaction_traces`
	// array if it matched the `filtering_include_filter_expr` and did *NOT* match the `filtering_exclude_filter_expr`.
	//
	// Moreover, each matching call that brought the transaction to be in `transaction_traces`
	// array will have a `filtering_matched` flag set on it to broadcast the fact that this call
	// match the inclusion/exclusion list.
	//
	// This flag controls all `transaction_traces` elements on the Block structure and on
	// substructures if present.
	FilteringApplied bool `protobuf:"varint,40,opt,name=filtering_applied,json=filteringApplied,proto3" json:"filtering_applied,omitempty"`
	// The CEL filter expression used to include transaction in `transaction_traces` array, works
	// in combination with `filtering_exclude_filter_expr` value.
	FilteringIncludeFilterExpr string `protobuf:"bytes,41,opt,name=filtering_include_filter_expr,json=filteringIncludeFilterExpr,proto3" json:"filtering_include_filter_expr,omitempty"`
	// The CEL filter expression used to exclude transaction in `transaction_traces` array, works
	// in combination with `filtering_include_filter_expr` value.
	FilteringExcludeFilterExpr string `protobuf:"bytes,42,opt,name=filtering_exclude_filter_expr,json=filteringExcludeFilterExpr,proto3" json:"filtering_exclude_filter_expr,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *Block) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Block) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Block) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetUncles() []*BlockHeader {
	if x != nil {
		return x.Uncles
	}
	return nil
}

func (x *Block) GetTransactionTraces() []*TransactionTrace {
	if x != nil {
		return x.TransactionTraces
	}
	return nil
}

func (x *Block) GetBalanceChanges() []*BalanceChange {
	if x != nil {
		return x.BalanceChanges
	}
	return nil
}

func (x *Block) GetCodeChanges() []*CodeChange {
	if x != nil {
		return x.CodeChanges
	}
	return nil
}

func (x *Block) GetFilteringApplied() bool {
	if x != nil {
		return x.FilteringApplied
	}
	return false
}

func (x *Block) GetFilteringIncludeFilterExpr() string {
	if x != nil {
		return x.FilteringIncludeFilterExpr
	}
	return ""
}

func (x *Block) GetFilteringExcludeFilterExpr() string {
	if x != nil {
		return x.FilteringExcludeFilterExpr
	}
	return ""
}

// HeaderOnlyBlock is a standard [Block] structure where all other fields are
// removed so that hydrating that object from a [Block] bytes payload will
// drastically reduced allocated memory required to hold the full block.
//
// This can be used to unpack a [Block] when only the [BlockHeader] information
// is required and greatly reduced required memory.
type HeaderOnlyBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *BlockHeader `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *HeaderOnlyBlock) Reset() {
	*x = HeaderOnlyBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderOnlyBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderOnlyBlock) ProtoMessage() {}

func (x *HeaderOnlyBlock) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderOnlyBlock.ProtoReflect.Descriptor instead.
func (*HeaderOnlyBlock) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{1}
}

func (x *HeaderOnlyBlock) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// BlockWithRefs is a lightweight block, with traces and transactions
// purged from the `block` within, and only.  It is used in transports
// to pass block data around.
type BlockWithRefs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Block                *Block           `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	TransactionTraceRefs *TransactionRefs `protobuf:"bytes,3,opt,name=transaction_trace_refs,json=transactionTraceRefs,proto3" json:"transaction_trace_refs,omitempty"`
	Irreversible         bool             `protobuf:"varint,4,opt,name=irreversible,proto3" json:"irreversible,omitempty"`
}

func (x *BlockWithRefs) Reset() {
	*x = BlockWithRefs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockWithRefs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockWithRefs) ProtoMessage() {}

func (x *BlockWithRefs) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockWithRefs.ProtoReflect.Descriptor instead.
func (*BlockWithRefs) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{2}
}

func (x *BlockWithRefs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockWithRefs) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BlockWithRefs) GetTransactionTraceRefs() *TransactionRefs {
	if x != nil {
		return x.TransactionTraceRefs
	}
	return nil
}

func (x *BlockWithRefs) GetIrreversible() bool {
	if x != nil {
		return x.Irreversible
	}
	return false
}

type TransactionRefs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (x *TransactionRefs) Reset() {
	*x = TransactionRefs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRefs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRefs) ProtoMessage() {}

func (x *TransactionRefs) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRefs.ProtoReflect.Descriptor instead.
func (*TransactionRefs) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionRefs) GetHashes() [][]byte {
	if x != nil {
		return x.Hashes
	}
	return nil
}

type UnclesHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uncles []*BlockHeader `protobuf:"bytes,1,rep,name=uncles,proto3" json:"uncles,omitempty"`
}

func (x *UnclesHeaders) Reset() {
	*x = UnclesHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnclesHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnclesHeaders) ProtoMessage() {}

func (x *UnclesHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnclesHeaders.ProtoReflect.Descriptor instead.
func (*UnclesHeaders) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{4}
}

func (x *UnclesHeaders) GetUncles() []*BlockHeader {
	if x != nil {
		return x.Uncles
	}
	return nil
}

type BlockRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Number uint64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *BlockRef) Reset() {
	*x = BlockRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRef) ProtoMessage() {}

func (x *BlockRef) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRef.ProtoReflect.Descriptor instead.
func (*BlockRef) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{5}
}

func (x *BlockRef) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockRef) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash       []byte                 `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`                   // geth: ParentHash + parentHash, parity: parentHash
	UncleHash        []byte                 `protobuf:"bytes,2,opt,name=uncle_hash,json=uncleHash,proto3" json:"uncle_hash,omitempty"`                      // geth: sha3Uncles, but sha3 is badly worded, so we prefer `uncle_hash`, parity: uncleHash
	Coinbase         []byte                 `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`                                         // geth: Coinbase + miner, parity: coinbase
	StateRoot        []byte                 `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`                      // geth: Root + json=stateRoot, parity: stateRoot
	TransactionsRoot []byte                 `protobuf:"bytes,5,opt,name=transactions_root,json=transactionsRoot,proto3" json:"transactions_root,omitempty"` // geth: TxHash + transactionsRoot, parity: transactionsTrie
	ReceiptRoot      []byte                 `protobuf:"bytes,6,opt,name=receipt_root,json=receiptRoot,proto3" json:"receipt_root,omitempty"`                // geth: ReceiptHash + receiptRoot, parity: receiptTrie
	LogsBloom        []byte                 `protobuf:"bytes,7,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`                      // internally called `Bloom`, parity uses `bloom`, geth's json uses `logsBloom`
	Difficulty       *BigInt                `protobuf:"bytes,8,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Number           uint64                 `protobuf:"varint,9,opt,name=number,proto3" json:"number,omitempty"`
	GasLimit         uint64                 `protobuf:"varint,10,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed          uint64                 `protobuf:"varint,11,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExtraData        []byte                 `protobuf:"bytes,13,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"` // geth: Extra []byte + extraData, parity: "0x"-prefixed extraData
	MixHash          []byte                 `protobuf:"bytes,14,opt,name=mix_hash,json=mixHash,proto3" json:"mix_hash,omitempty"`       // geth: MixDigest + mixHash, parity: mixHash
	Nonce            uint64                 `protobuf:"varint,15,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Hash             []byte                 `protobuf:"bytes,16,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{6}
}

func (x *BlockHeader) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *BlockHeader) GetUncleHash() []byte {
	if x != nil {
		return x.UncleHash
	}
	return nil
}

func (x *BlockHeader) GetCoinbase() []byte {
	if x != nil {
		return x.Coinbase
	}
	return nil
}

func (x *BlockHeader) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *BlockHeader) GetTransactionsRoot() []byte {
	if x != nil {
		return x.TransactionsRoot
	}
	return nil
}

func (x *BlockHeader) GetReceiptRoot() []byte {
	if x != nil {
		return x.ReceiptRoot
	}
	return nil
}

func (x *BlockHeader) GetLogsBloom() []byte {
	if x != nil {
		return x.LogsBloom
	}
	return nil
}

func (x *BlockHeader) GetDifficulty() *BigInt {
	if x != nil {
		return x.Difficulty
	}
	return nil
}

func (x *BlockHeader) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BlockHeader) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *BlockHeader) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *BlockHeader) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BlockHeader) GetExtraData() []byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *BlockHeader) GetMixHash() []byte {
	if x != nil {
		return x.MixHash
	}
	return nil
}

func (x *BlockHeader) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *BlockHeader) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type BigInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *BigInt) Reset() {
	*x = BigInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigInt) ProtoMessage() {}

func (x *BigInt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigInt.ProtoReflect.Descriptor instead.
func (*BigInt) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{7}
}

func (x *BigInt) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type TransactionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousState     TransactionState_State      `protobuf:"varint,1,opt,name=previous_state,json=previousState,proto3,enum=sf.ethereum.codec.v1.TransactionState_State" json:"previous_state,omitempty"`
	CurrentState      TransactionState_State      `protobuf:"varint,2,opt,name=current_state,json=currentState,proto3,enum=sf.ethereum.codec.v1.TransactionState_State" json:"current_state,omitempty"`
	Transition        TransactionState_Transition `protobuf:"varint,10,opt,name=transition,proto3,enum=sf.ethereum.codec.v1.TransactionState_Transition" json:"transition,omitempty"`
	Hash              []byte                      `protobuf:"bytes,11,opt,name=hash,proto3" json:"hash,omitempty"`
	Trx               *Transaction                `protobuf:"bytes,3,opt,name=trx,proto3" json:"trx,omitempty"`
	BlockHeader       *BlockHeader                `protobuf:"bytes,4,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
	TransactionTraces *TransactionTrace           `protobuf:"bytes,5,opt,name=transaction_traces,json=transactionTraces,proto3" json:"transaction_traces,omitempty"`
	Confirmation      uint64                      `protobuf:"varint,6,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	HeadBlockHeader   *BlockHeader                `protobuf:"bytes,7,opt,name=head_block_header,json=headBlockHeader,proto3" json:"head_block_header,omitempty"`
	ReplacedByHash    []byte                      `protobuf:"bytes,8,opt,name=replaced_by_hash,json=replacedByHash,proto3" json:"replaced_by_hash,omitempty"`
	PendingFirstSeen  *timestamppb.Timestamp      `protobuf:"bytes,12,opt,name=pending_first_seen,json=pendingFirstSeen,proto3" json:"pending_first_seen,omitempty"`
	PendingLastSeen   *timestamppb.Timestamp      `protobuf:"bytes,13,opt,name=pending_last_seen,json=pendingLastSeen,proto3" json:"pending_last_seen,omitempty"`
}

func (x *TransactionState) Reset() {
	*x = TransactionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionState) ProtoMessage() {}

func (x *TransactionState) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionState.ProtoReflect.Descriptor instead.
func (*TransactionState) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionState) GetPreviousState() TransactionState_State {
	if x != nil {
		return x.PreviousState
	}
	return TransactionState_STATE_UNKNOWN
}

func (x *TransactionState) GetCurrentState() TransactionState_State {
	if x != nil {
		return x.CurrentState
	}
	return TransactionState_STATE_UNKNOWN
}

func (x *TransactionState) GetTransition() TransactionState_Transition {
	if x != nil {
		return x.Transition
	}
	return TransactionState_TRANS_INIT
}

func (x *TransactionState) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TransactionState) GetTrx() *Transaction {
	if x != nil {
		return x.Trx
	}
	return nil
}

func (x *TransactionState) GetBlockHeader() *BlockHeader {
	if x != nil {
		return x.BlockHeader
	}
	return nil
}

func (x *TransactionState) GetTransactionTraces() *TransactionTrace {
	if x != nil {
		return x.TransactionTraces
	}
	return nil
}

func (x *TransactionState) GetConfirmation() uint64 {
	if x != nil {
		return x.Confirmation
	}
	return 0
}

func (x *TransactionState) GetHeadBlockHeader() *BlockHeader {
	if x != nil {
		return x.HeadBlockHeader
	}
	return nil
}

func (x *TransactionState) GetReplacedByHash() []byte {
	if x != nil {
		return x.ReplacedByHash
	}
	return nil
}

func (x *TransactionState) GetPendingFirstSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.PendingFirstSeen
	}
	return nil
}

func (x *TransactionState) GetPendingLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.PendingLastSeen
	}
	return nil
}

// A Transaction not yet in block
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// consensus
	To       []byte  `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Nonce    uint64  `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasPrice *BigInt `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit uint64  `protobuf:"varint,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Value    *BigInt `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"` // amount of ETH transfered, in addition to used_gas * gas_price, sometimes referred to as `Amount`
	Input    []byte  `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	V        []byte  `protobuf:"bytes,7,opt,name=v,proto3" json:"v,omitempty"` // signature values
	R        []byte  `protobuf:"bytes,8,opt,name=r,proto3" json:"r,omitempty"`
	S        []byte  `protobuf:"bytes,9,opt,name=s,proto3" json:"s,omitempty"`
	// meta
	Hash []byte `protobuf:"bytes,21,opt,name=hash,proto3" json:"hash,omitempty"`
	From []byte `protobuf:"bytes,22,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{9}
}

func (x *Transaction) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Transaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Transaction) GetGasPrice() *BigInt {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *Transaction) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Transaction) GetValue() *BigInt {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Transaction) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Transaction) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *Transaction) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *Transaction) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *Transaction) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Transaction) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

type TransactionTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// consensus
	To       []byte  `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Nonce    uint64  `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasPrice *BigInt `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit uint64  `protobuf:"varint,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Value    *BigInt `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"` // amount of ETH transfered, in addition to used_gas * gas_price, sometimes referred to as `Amount`
	Input    []byte  `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	V        []byte  `protobuf:"bytes,7,opt,name=v,proto3" json:"v,omitempty"` // signature values
	R        []byte  `protobuf:"bytes,8,opt,name=r,proto3" json:"r,omitempty"`
	S        []byte  `protobuf:"bytes,9,opt,name=s,proto3" json:"s,omitempty"`
	GasUsed  uint64  `protobuf:"varint,10,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// meta
	Index      uint32                 `protobuf:"varint,20,opt,name=index,proto3" json:"index,omitempty"`
	Hash       []byte                 `protobuf:"bytes,21,opt,name=hash,proto3" json:"hash,omitempty"`
	From       []byte                 `protobuf:"bytes,22,opt,name=from,proto3" json:"from,omitempty"`
	ReturnData []byte                 `protobuf:"bytes,23,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"`
	PublicKey  []byte                 `protobuf:"bytes,24,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Status     TransactionTraceStatus `protobuf:"varint,30,opt,name=status,proto3,enum=sf.ethereum.codec.v1.TransactionTraceStatus" json:"status,omitempty"`
	Receipt    *TransactionReceipt    `protobuf:"bytes,31,opt,name=receipt,proto3" json:"receipt,omitempty"`
	Calls      []*Call                `protobuf:"bytes,32,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *TransactionTrace) Reset() {
	*x = TransactionTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTrace) ProtoMessage() {}

func (x *TransactionTrace) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTrace.ProtoReflect.Descriptor instead.
func (*TransactionTrace) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{10}
}

func (x *TransactionTrace) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *TransactionTrace) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TransactionTrace) GetGasPrice() *BigInt {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *TransactionTrace) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *TransactionTrace) GetValue() *BigInt {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TransactionTrace) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *TransactionTrace) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *TransactionTrace) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *TransactionTrace) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *TransactionTrace) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *TransactionTrace) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TransactionTrace) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TransactionTrace) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TransactionTrace) GetReturnData() []byte {
	if x != nil {
		return x.ReturnData
	}
	return nil
}

func (x *TransactionTrace) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *TransactionTrace) GetStatus() TransactionTraceStatus {
	if x != nil {
		return x.Status
	}
	return TransactionTraceStatus_UNKNOWN
}

func (x *TransactionTrace) GetReceipt() *TransactionReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *TransactionTrace) GetCalls() []*Call {
	if x != nil {
		return x.Calls
	}
	return nil
}

// TransactionTraceWithBlockRef
type TransactionTraceWithBlockRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trace    *TransactionTrace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	BlockRef *BlockRef         `protobuf:"bytes,2,opt,name=block_ref,json=blockRef,proto3" json:"block_ref,omitempty"`
}

func (x *TransactionTraceWithBlockRef) Reset() {
	*x = TransactionTraceWithBlockRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTraceWithBlockRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTraceWithBlockRef) ProtoMessage() {}

func (x *TransactionTraceWithBlockRef) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTraceWithBlockRef.ProtoReflect.Descriptor instead.
func (*TransactionTraceWithBlockRef) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{11}
}

func (x *TransactionTraceWithBlockRef) GetTrace() *TransactionTrace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TransactionTraceWithBlockRef) GetBlockRef() *BlockRef {
	if x != nil {
		return x.BlockRef
	}
	return nil
}

type TransactionReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// consensus
	StateRoot         []byte `protobuf:"bytes,1,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	CumulativeGasUsed uint64 `protobuf:"varint,2,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty"`
	LogsBloom         []byte `protobuf:"bytes,3,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	Logs              []*Log `protobuf:"bytes,4,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *TransactionReceipt) Reset() {
	*x = TransactionReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReceipt) ProtoMessage() {}

func (x *TransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReceipt.ProtoReflect.Descriptor instead.
func (*TransactionReceipt) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{12}
}

func (x *TransactionReceipt) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *TransactionReceipt) GetCumulativeGasUsed() uint64 {
	if x != nil {
		return x.CumulativeGasUsed
	}
	return 0
}

func (x *TransactionReceipt) GetLogsBloom() []byte {
	if x != nil {
		return x.LogsBloom
	}
	return nil
}

func (x *TransactionReceipt) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Topics  [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Data    []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Index is the index of the log relative to the transaction. This index
	// is always populated regardless of the state revertion of the the call
	// that emitted this log.
	Index uint32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	// BlockIndex represents the index of the log relative to the Block.
	//
	// An **important** notice is that this field will be 0 when the call
	// that emitted the log has been reverted by the chain.
	//
	// Currently, there is two locations where a Log can be obtained:
	// - block.transaction_traces[].receipt.logs[]
	// - block.transaction_traces[].calls[].logs[]
	//
	// In the `receipt` case, the logs will be populated only when the call
	// that emitted them has not been reverted by the chain and when in this
	// position, the `blockIndex` is always populated correctly.
	//
	// In the case of `calls` case, for `call` where `stateReverted == true`,
	// the `blockIndex` value will always be 0.
	BlockIndex uint32 `protobuf:"varint,6,opt,name=blockIndex,proto3" json:"blockIndex,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{13}
}

func (x *Log) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Log) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Log) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Log) GetBlockIndex() uint32 {
	if x != nil {
		return x.BlockIndex
	}
	return 0
}

type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        uint32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ParentIndex  uint32   `protobuf:"varint,2,opt,name=parent_index,json=parentIndex,proto3" json:"parent_index,omitempty"`
	Depth        uint32   `protobuf:"varint,3,opt,name=depth,proto3" json:"depth,omitempty"`
	CallType     CallType `protobuf:"varint,4,opt,name=call_type,json=callType,proto3,enum=sf.ethereum.codec.v1.CallType" json:"call_type,omitempty"`
	Caller       []byte   `protobuf:"bytes,5,opt,name=caller,proto3" json:"caller,omitempty"`
	Address      []byte   `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Value        *BigInt  `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	GasLimit     uint64   `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasConsumed  uint64   `protobuf:"varint,9,opt,name=gas_consumed,json=gasConsumed,proto3" json:"gas_consumed,omitempty"`
	ReturnData   []byte   `protobuf:"bytes,13,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"`
	Input        []byte   `protobuf:"bytes,14,opt,name=input,proto3" json:"input,omitempty"`
	ExecutedCode bool     `protobuf:"varint,15,opt,name=executed_code,json=executedCode,proto3" json:"executed_code,omitempty"`
	Suicide      bool     `protobuf:"varint,16,opt,name=suicide,proto3" json:"suicide,omitempty"`
	// hex representation of the hash -> preimage
	KeccakPreimages map[string]string `protobuf:"bytes,20,rep,name=keccak_preimages,json=keccakPreimages,proto3" json:"keccak_preimages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StorageChanges  []*StorageChange  `protobuf:"bytes,21,rep,name=storage_changes,json=storageChanges,proto3" json:"storage_changes,omitempty"`
	BalanceChanges  []*BalanceChange  `protobuf:"bytes,22,rep,name=balance_changes,json=balanceChanges,proto3" json:"balance_changes,omitempty"`
	NonceChanges    []*NonceChange    `protobuf:"bytes,24,rep,name=nonce_changes,json=nonceChanges,proto3" json:"nonce_changes,omitempty"`
	Logs            []*Log            `protobuf:"bytes,25,rep,name=logs,proto3" json:"logs,omitempty"`
	CodeChanges     []*CodeChange     `protobuf:"bytes,26,rep,name=code_changes,json=codeChanges,proto3" json:"code_changes,omitempty"`
	CreatedAccounts [][]byte          `protobuf:"bytes,27,rep,name=created_accounts,json=createdAccounts,proto3" json:"created_accounts,omitempty"`
	GasChanges      []*GasChange      `protobuf:"bytes,28,rep,name=gas_changes,json=gasChanges,proto3" json:"gas_changes,omitempty"`
	GasEvents       []*GasEvent       `protobuf:"bytes,29,rep,name=gas_events,json=gasEvents,proto3" json:"gas_events,omitempty"`
	// In Ethereum, a call can be either:
	// - Successfull, execution passes without any problem encountered
	// - Failed, execution failed, and remaining gas should be consumed
	// - Reverted, execution failed, but only gas consumed so far is billed, remaining gas is refunded
	//
	// When a call is either `failed` or `reverted`, the `status_failed` field
	// below is set to `true`. If the status is `reverted`, then both `status_failed`
	// and `status_reverted` are going to be set to `true`.
	StatusFailed   bool `protobuf:"varint,10,opt,name=status_failed,json=statusFailed,proto3" json:"status_failed,omitempty"`
	StatusReverted bool `protobuf:"varint,12,opt,name=status_reverted,json=statusReverted,proto3" json:"status_reverted,omitempty"`
	// Populated when a call either failed or reverted, so when `status_failed == true`,
	// see above for details about those flags.
	FailureReason string `protobuf:"bytes,11,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	// This field represents wheter or not the state changes performed
	// by this call were correctly recorded by the blockchain.
	//
	// On Ethereum, a transaction can record state changes even if some
	// of its inner nested calls failed. This is problematic however since
	// a call will invalidate all its state changes as well as all state
	// changes performed by its child call. This means that even if a call
	// has a status of `SUCCESS`, the chain might have reverted all the state
	// changes it performed.
	//
	// ```text
	//   Trx 1
	//    Call #1 <Failed>
	//      Call #2 <Execution Success>
	//      Call #3 <Execution Success>
	//      |--- Failure here
	//    Call #4
	// ```
	//
	// In the transaction above, while Call #2 and Call #3 would have the
	// status `EXECUTED`
	StateReverted       bool                  `protobuf:"varint,30,opt,name=state_reverted,json=stateReverted,proto3" json:"state_reverted,omitempty"`
	Erc20BalanceChanges []*ERC20BalanceChange `protobuf:"bytes,50,rep,name=erc20_balance_changes,json=erc20BalanceChanges,proto3" json:"erc20_balance_changes,omitempty"`
	Erc20TransferEvents []*ERC20TransferEvent `protobuf:"bytes,51,rep,name=erc20_transfer_events,json=erc20TransferEvents,proto3" json:"erc20_transfer_events,omitempty"`
	// Whether this call trace was a successful match, present only when filtering was applied on block. This
	// will be `true` if the Block `filtering_applied` is `true`, if the include CEL filter matched and
	// if the exclude CEL filter did NOT match.
	FilteringMatched bool `protobuf:"varint,60,opt,name=filtering_matched,json=filteringMatched,proto3" json:"filtering_matched,omitempty"`
}

func (x *Call) Reset() {
	*x = Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{14}
}

func (x *Call) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Call) GetParentIndex() uint32 {
	if x != nil {
		return x.ParentIndex
	}
	return 0
}

func (x *Call) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *Call) GetCallType() CallType {
	if x != nil {
		return x.CallType
	}
	return CallType_UNSPECIFIED
}

func (x *Call) GetCaller() []byte {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *Call) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Call) GetValue() *BigInt {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Call) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Call) GetGasConsumed() uint64 {
	if x != nil {
		return x.GasConsumed
	}
	return 0
}

func (x *Call) GetReturnData() []byte {
	if x != nil {
		return x.ReturnData
	}
	return nil
}

func (x *Call) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Call) GetExecutedCode() bool {
	if x != nil {
		return x.ExecutedCode
	}
	return false
}

func (x *Call) GetSuicide() bool {
	if x != nil {
		return x.Suicide
	}
	return false
}

func (x *Call) GetKeccakPreimages() map[string]string {
	if x != nil {
		return x.KeccakPreimages
	}
	return nil
}

func (x *Call) GetStorageChanges() []*StorageChange {
	if x != nil {
		return x.StorageChanges
	}
	return nil
}

func (x *Call) GetBalanceChanges() []*BalanceChange {
	if x != nil {
		return x.BalanceChanges
	}
	return nil
}

func (x *Call) GetNonceChanges() []*NonceChange {
	if x != nil {
		return x.NonceChanges
	}
	return nil
}

func (x *Call) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Call) GetCodeChanges() []*CodeChange {
	if x != nil {
		return x.CodeChanges
	}
	return nil
}

func (x *Call) GetCreatedAccounts() [][]byte {
	if x != nil {
		return x.CreatedAccounts
	}
	return nil
}

func (x *Call) GetGasChanges() []*GasChange {
	if x != nil {
		return x.GasChanges
	}
	return nil
}

func (x *Call) GetGasEvents() []*GasEvent {
	if x != nil {
		return x.GasEvents
	}
	return nil
}

func (x *Call) GetStatusFailed() bool {
	if x != nil {
		return x.StatusFailed
	}
	return false
}

func (x *Call) GetStatusReverted() bool {
	if x != nil {
		return x.StatusReverted
	}
	return false
}

func (x *Call) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *Call) GetStateReverted() bool {
	if x != nil {
		return x.StateReverted
	}
	return false
}

func (x *Call) GetErc20BalanceChanges() []*ERC20BalanceChange {
	if x != nil {
		return x.Erc20BalanceChanges
	}
	return nil
}

func (x *Call) GetErc20TransferEvents() []*ERC20TransferEvent {
	if x != nil {
		return x.Erc20TransferEvents
	}
	return nil
}

func (x *Call) GetFilteringMatched() bool {
	if x != nil {
		return x.FilteringMatched
	}
	return false
}

type ERC20BalanceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HolderAddress []byte  `protobuf:"bytes,1,opt,name=holder_address,json=holderAddress,proto3" json:"holder_address,omitempty"`
	OldBalance    *BigInt `protobuf:"bytes,2,opt,name=old_balance,json=oldBalance,proto3" json:"old_balance,omitempty"`
	NewBalance    *BigInt `protobuf:"bytes,3,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"`
}

func (x *ERC20BalanceChange) Reset() {
	*x = ERC20BalanceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20BalanceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20BalanceChange) ProtoMessage() {}

func (x *ERC20BalanceChange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20BalanceChange.ProtoReflect.Descriptor instead.
func (*ERC20BalanceChange) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{15}
}

func (x *ERC20BalanceChange) GetHolderAddress() []byte {
	if x != nil {
		return x.HolderAddress
	}
	return nil
}

func (x *ERC20BalanceChange) GetOldBalance() *BigInt {
	if x != nil {
		return x.OldBalance
	}
	return nil
}

func (x *ERC20BalanceChange) GetNewBalance() *BigInt {
	if x != nil {
		return x.NewBalance
	}
	return nil
}

type ERC20TransferEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   []byte  `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To     []byte  `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Amount *BigInt `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ERC20TransferEvent) Reset() {
	*x = ERC20TransferEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20TransferEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20TransferEvent) ProtoMessage() {}

func (x *ERC20TransferEvent) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20TransferEvent.ProtoReflect.Descriptor instead.
func (*ERC20TransferEvent) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{16}
}

func (x *ERC20TransferEvent) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ERC20TransferEvent) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ERC20TransferEvent) GetAmount() *BigInt {
	if x != nil {
		return x.Amount
	}
	return nil
}

type StorageChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Key      []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	OldValue []byte `protobuf:"bytes,3,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue []byte `protobuf:"bytes,4,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
}

func (x *StorageChange) Reset() {
	*x = StorageChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageChange) ProtoMessage() {}

func (x *StorageChange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageChange.ProtoReflect.Descriptor instead.
func (*StorageChange) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{17}
}

func (x *StorageChange) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *StorageChange) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StorageChange) GetOldValue() []byte {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *StorageChange) GetNewValue() []byte {
	if x != nil {
		return x.NewValue
	}
	return nil
}

type BalanceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  []byte               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	OldValue *BigInt              `protobuf:"bytes,2,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue *BigInt              `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	Reason   BalanceChange_Reason `protobuf:"varint,4,opt,name=reason,proto3,enum=sf.ethereum.codec.v1.BalanceChange_Reason" json:"reason,omitempty"`
}

func (x *BalanceChange) Reset() {
	*x = BalanceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceChange) ProtoMessage() {}

func (x *BalanceChange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceChange.ProtoReflect.Descriptor instead.
func (*BalanceChange) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{18}
}

func (x *BalanceChange) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *BalanceChange) GetOldValue() *BigInt {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *BalanceChange) GetNewValue() *BigInt {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *BalanceChange) GetReason() BalanceChange_Reason {
	if x != nil {
		return x.Reason
	}
	return BalanceChange_REASON_UNKNOWN
}

type NonceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	OldValue uint64 `protobuf:"varint,2,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue uint64 `protobuf:"varint,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
}

func (x *NonceChange) Reset() {
	*x = NonceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceChange) ProtoMessage() {}

func (x *NonceChange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceChange.ProtoReflect.Descriptor instead.
func (*NonceChange) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{19}
}

func (x *NonceChange) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *NonceChange) GetOldValue() uint64 {
	if x != nil {
		return x.OldValue
	}
	return 0
}

func (x *NonceChange) GetNewValue() uint64 {
	if x != nil {
		return x.NewValue
	}
	return 0
}

type CodeChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	OldHash []byte `protobuf:"bytes,2,opt,name=old_hash,json=oldHash,proto3" json:"old_hash,omitempty"`
	OldCode []byte `protobuf:"bytes,3,opt,name=old_code,json=oldCode,proto3" json:"old_code,omitempty"`
	NewHash []byte `protobuf:"bytes,4,opt,name=new_hash,json=newHash,proto3" json:"new_hash,omitempty"`
	NewCode []byte `protobuf:"bytes,5,opt,name=new_code,json=newCode,proto3" json:"new_code,omitempty"`
}

func (x *CodeChange) Reset() {
	*x = CodeChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeChange) ProtoMessage() {}

func (x *CodeChange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeChange.ProtoReflect.Descriptor instead.
func (*CodeChange) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{20}
}

func (x *CodeChange) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CodeChange) GetOldHash() []byte {
	if x != nil {
		return x.OldHash
	}
	return nil
}

func (x *CodeChange) GetOldCode() []byte {
	if x != nil {
		return x.OldCode
	}
	return nil
}

func (x *CodeChange) GetNewHash() []byte {
	if x != nil {
		return x.NewHash
	}
	return nil
}

func (x *CodeChange) GetNewCode() []byte {
	if x != nil {
		return x.NewCode
	}
	return nil
}

// The gas change model represents the reason why some gas cost has occurred.
// The gas is computed per actual op codes. Doing them completely might prove
// overwhelming in most cases.
//
// Hence, we only index some of them, those that are costy like all the calls
// one, log events, return data, etc.
type GasChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldValue uint64           `protobuf:"varint,1,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue uint64           `protobuf:"varint,2,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	Reason   GasChange_Reason `protobuf:"varint,3,opt,name=reason,proto3,enum=sf.ethereum.codec.v1.GasChange_Reason" json:"reason,omitempty"`
}

func (x *GasChange) Reset() {
	*x = GasChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasChange) ProtoMessage() {}

func (x *GasChange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasChange.ProtoReflect.Descriptor instead.
func (*GasChange) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{21}
}

func (x *GasChange) GetOldValue() uint64 {
	if x != nil {
		return x.OldValue
	}
	return 0
}

func (x *GasChange) GetNewValue() uint64 {
	if x != nil {
		return x.NewValue
	}
	return 0
}

func (x *GasChange) GetReason() GasChange_Reason {
	if x != nil {
		return x.Reason
	}
	return GasChange_REASON_UNKNOWN
}

// Gas events are emitted to faciliate gas tracking avoid the execution
// call stack that happens while processing a transaction on the chain.
//
// We currently have events for tracing of gas amount before and after
// each child call.
type GasEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              GasEvent_Id `protobuf:"varint,1,opt,name=id,proto3,enum=sf.ethereum.codec.v1.GasEvent_Id" json:"id,omitempty"`
	Gas             uint64      `protobuf:"varint,2,opt,name=gas,proto3" json:"gas,omitempty"`
	LinkedCallIndex uint64      `protobuf:"varint,3,opt,name=linked_call_index,json=linkedCallIndex,proto3" json:"linked_call_index,omitempty"`
}

func (x *GasEvent) Reset() {
	*x = GasEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasEvent) ProtoMessage() {}

func (x *GasEvent) ProtoReflect() protoreflect.Message {
	mi := &file_sf_ethereum_codec_v1_codec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasEvent.ProtoReflect.Descriptor instead.
func (*GasEvent) Descriptor() ([]byte, []int) {
	return file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP(), []int{22}
}

func (x *GasEvent) GetId() GasEvent_Id {
	if x != nil {
		return x.Id
	}
	return GasEvent_ID_UNKNOWN
}

func (x *GasEvent) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *GasEvent) GetLinkedCallIndex() uint64 {
	if x != nil {
		return x.LinkedCallIndex
	}
	return 0
}

var File_sf_ethereum_codec_v1_codec_proto protoreflect.FileDescriptor

var file_sf_ethereum_codec_v1_codec_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x66, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x04, 0x0a, 0x05, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x22, 0x4c, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xd3, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x66, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x5b, 0x0a, 0x16, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x73, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x72, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x29, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x0d, 0x55, 0x6e, 0x63, 0x6c, 0x65,
	0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x75, 0x6e, 0x63, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x75, 0x6e, 0x63,
	0x6c, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa3, 0x04, 0x0a, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x6e, 0x63, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x62,
	0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73,
	0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x69, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6d, 0x69, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x1e, 0x0a, 0x06, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x22, 0x98, 0x08, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x03, 0x74, 0x72, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x72, 0x78, 0x12, 0x44, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x55, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x11, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x42, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x48, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x46,
	0x0a, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x50,
	0x4f, 0x4f, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x4c, 0x59, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x45, 0x44, 0x10, 0x06, 0x22, 0x55, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x03, 0x22, 0xa7, 0x02, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67,
	0x49, 0x6e, 0x74, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x72,
	0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0xd9, 0x04, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x39, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49,
	0x6e, 0x74, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x72, 0x12,
	0x0c, 0x0a, 0x01, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x07,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x66, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x3b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x66, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x22, 0xb1,
	0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x6c,
	0x6f, 0x6f, 0x6d, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xd7, 0x0b, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x3b,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x67, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x69, 0x63, 0x69, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x69, 0x63, 0x69, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x6b, 0x65, 0x63, 0x63, 0x61,
	0x6b, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x4b, 0x65,
	0x63, 0x63, 0x61, 0x6b, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x46, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x66,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x67, 0x61,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x61,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x15, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x32, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x13, 0x65, 0x72,
	0x63, 0x32, 0x30, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x5c, 0x0a, 0x15, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x65, 0x72, 0x63, 0x32,
	0x30, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x1a, 0x42, 0x0a, 0x14,
	0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb9, 0x01, 0x0a, 0x12, 0x45, 0x52, 0x43, 0x32, 0x30, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d,
	0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74,
	0x52, 0x0a, 0x6e, 0x65, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x6e, 0x0a, 0x12,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69,
	0x67, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x75, 0x0a, 0x0d,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x9e, 0x05, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x39, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74,
	0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x65,
	0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb8, 0x03, 0x0a, 0x06, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x5f, 0x55,
	0x4e, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44,
	0x41, 0x4f, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44,
	0x41, 0x4f, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x53, 0x49, 0x53, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47,
	0x41, 0x53, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x45, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x09, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x49, 0x43, 0x49, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x55,
	0x4e, 0x44, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53,
	0x55, 0x49, 0x43, 0x49, 0x44, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10,
	0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44,
	0x45, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x52, 0x4e, 0x10, 0x0f, 0x22, 0x61, 0x0a, 0x0b, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e,
	0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xaa, 0x05, 0x0a,
	0x09, 0x47, 0x61, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa2, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43,
	0x4f, 0x50, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x32, 0x10,
	0x07, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x10,
	0x09, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x49, 0x4e, 0x53, 0x49, 0x43, 0x5f, 0x47, 0x41, 0x53,
	0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x46, 0x55, 0x4e, 0x44, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x43, 0x4f, 0x50, 0x59, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x55, 0x43,
	0x54, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x44,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x14, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x47, 0x61,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3b, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x0a, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x44, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x44, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x41, 0x4c, 0x4c, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x43, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x05, 0x42,
	0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x66, 0x2d, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2f, 0x76, 0x31, 0x3b,
	0x70, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_ethereum_codec_v1_codec_proto_rawDescOnce sync.Once
	file_sf_ethereum_codec_v1_codec_proto_rawDescData = file_sf_ethereum_codec_v1_codec_proto_rawDesc
)

func file_sf_ethereum_codec_v1_codec_proto_rawDescGZIP() []byte {
	file_sf_ethereum_codec_v1_codec_proto_rawDescOnce.Do(func() {
		file_sf_ethereum_codec_v1_codec_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_ethereum_codec_v1_codec_proto_rawDescData)
	})
	return file_sf_ethereum_codec_v1_codec_proto_rawDescData
}

var file_sf_ethereum_codec_v1_codec_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_sf_ethereum_codec_v1_codec_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_sf_ethereum_codec_v1_codec_proto_goTypes = []interface{}{
	(TransactionTraceStatus)(0),          // 0: sf.ethereum.codec.v1.TransactionTraceStatus
	(CallType)(0),                        // 1: sf.ethereum.codec.v1.CallType
	(TransactionState_Transition)(0),     // 2: sf.ethereum.codec.v1.TransactionState.Transition
	(TransactionState_State)(0),          // 3: sf.ethereum.codec.v1.TransactionState.State
	(BalanceChange_Reason)(0),            // 4: sf.ethereum.codec.v1.BalanceChange.Reason
	(GasChange_Reason)(0),                // 5: sf.ethereum.codec.v1.GasChange.Reason
	(GasEvent_Id)(0),                     // 6: sf.ethereum.codec.v1.GasEvent.Id
	(*Block)(nil),                        // 7: sf.ethereum.codec.v1.Block
	(*HeaderOnlyBlock)(nil),              // 8: sf.ethereum.codec.v1.HeaderOnlyBlock
	(*BlockWithRefs)(nil),                // 9: sf.ethereum.codec.v1.BlockWithRefs
	(*TransactionRefs)(nil),              // 10: sf.ethereum.codec.v1.TransactionRefs
	(*UnclesHeaders)(nil),                // 11: sf.ethereum.codec.v1.UnclesHeaders
	(*BlockRef)(nil),                     // 12: sf.ethereum.codec.v1.BlockRef
	(*BlockHeader)(nil),                  // 13: sf.ethereum.codec.v1.BlockHeader
	(*BigInt)(nil),                       // 14: sf.ethereum.codec.v1.BigInt
	(*TransactionState)(nil),             // 15: sf.ethereum.codec.v1.TransactionState
	(*Transaction)(nil),                  // 16: sf.ethereum.codec.v1.Transaction
	(*TransactionTrace)(nil),             // 17: sf.ethereum.codec.v1.TransactionTrace
	(*TransactionTraceWithBlockRef)(nil), // 18: sf.ethereum.codec.v1.TransactionTraceWithBlockRef
	(*TransactionReceipt)(nil),           // 19: sf.ethereum.codec.v1.TransactionReceipt
	(*Log)(nil),                          // 20: sf.ethereum.codec.v1.Log
	(*Call)(nil),                         // 21: sf.ethereum.codec.v1.Call
	(*ERC20BalanceChange)(nil),           // 22: sf.ethereum.codec.v1.ERC20BalanceChange
	(*ERC20TransferEvent)(nil),           // 23: sf.ethereum.codec.v1.ERC20TransferEvent
	(*StorageChange)(nil),                // 24: sf.ethereum.codec.v1.StorageChange
	(*BalanceChange)(nil),                // 25: sf.ethereum.codec.v1.BalanceChange
	(*NonceChange)(nil),                  // 26: sf.ethereum.codec.v1.NonceChange
	(*CodeChange)(nil),                   // 27: sf.ethereum.codec.v1.CodeChange
	(*GasChange)(nil),                    // 28: sf.ethereum.codec.v1.GasChange
	(*GasEvent)(nil),                     // 29: sf.ethereum.codec.v1.GasEvent
	nil,                                  // 30: sf.ethereum.codec.v1.Call.KeccakPreimagesEntry
	(*timestamppb.Timestamp)(nil),        // 31: google.protobuf.Timestamp
}
var file_sf_ethereum_codec_v1_codec_proto_depIdxs = []int32{
	13, // 0: sf.ethereum.codec.v1.Block.header:type_name -> sf.ethereum.codec.v1.BlockHeader
	13, // 1: sf.ethereum.codec.v1.Block.uncles:type_name -> sf.ethereum.codec.v1.BlockHeader
	17, // 2: sf.ethereum.codec.v1.Block.transaction_traces:type_name -> sf.ethereum.codec.v1.TransactionTrace
	25, // 3: sf.ethereum.codec.v1.Block.balance_changes:type_name -> sf.ethereum.codec.v1.BalanceChange
	27, // 4: sf.ethereum.codec.v1.Block.code_changes:type_name -> sf.ethereum.codec.v1.CodeChange
	13, // 5: sf.ethereum.codec.v1.HeaderOnlyBlock.header:type_name -> sf.ethereum.codec.v1.BlockHeader
	7,  // 6: sf.ethereum.codec.v1.BlockWithRefs.block:type_name -> sf.ethereum.codec.v1.Block
	10, // 7: sf.ethereum.codec.v1.BlockWithRefs.transaction_trace_refs:type_name -> sf.ethereum.codec.v1.TransactionRefs
	13, // 8: sf.ethereum.codec.v1.UnclesHeaders.uncles:type_name -> sf.ethereum.codec.v1.BlockHeader
	14, // 9: sf.ethereum.codec.v1.BlockHeader.difficulty:type_name -> sf.ethereum.codec.v1.BigInt
	31, // 10: sf.ethereum.codec.v1.BlockHeader.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 11: sf.ethereum.codec.v1.TransactionState.previous_state:type_name -> sf.ethereum.codec.v1.TransactionState.State
	3,  // 12: sf.ethereum.codec.v1.TransactionState.current_state:type_name -> sf.ethereum.codec.v1.TransactionState.State
	2,  // 13: sf.ethereum.codec.v1.TransactionState.transition:type_name -> sf.ethereum.codec.v1.TransactionState.Transition
	16, // 14: sf.ethereum.codec.v1.TransactionState.trx:type_name -> sf.ethereum.codec.v1.Transaction
	13, // 15: sf.ethereum.codec.v1.TransactionState.block_header:type_name -> sf.ethereum.codec.v1.BlockHeader
	17, // 16: sf.ethereum.codec.v1.TransactionState.transaction_traces:type_name -> sf.ethereum.codec.v1.TransactionTrace
	13, // 17: sf.ethereum.codec.v1.TransactionState.head_block_header:type_name -> sf.ethereum.codec.v1.BlockHeader
	31, // 18: sf.ethereum.codec.v1.TransactionState.pending_first_seen:type_name -> google.protobuf.Timestamp
	31, // 19: sf.ethereum.codec.v1.TransactionState.pending_last_seen:type_name -> google.protobuf.Timestamp
	14, // 20: sf.ethereum.codec.v1.Transaction.gas_price:type_name -> sf.ethereum.codec.v1.BigInt
	14, // 21: sf.ethereum.codec.v1.Transaction.value:type_name -> sf.ethereum.codec.v1.BigInt
	14, // 22: sf.ethereum.codec.v1.TransactionTrace.gas_price:type_name -> sf.ethereum.codec.v1.BigInt
	14, // 23: sf.ethereum.codec.v1.TransactionTrace.value:type_name -> sf.ethereum.codec.v1.BigInt
	0,  // 24: sf.ethereum.codec.v1.TransactionTrace.status:type_name -> sf.ethereum.codec.v1.TransactionTraceStatus
	19, // 25: sf.ethereum.codec.v1.TransactionTrace.receipt:type_name -> sf.ethereum.codec.v1.TransactionReceipt
	21, // 26: sf.ethereum.codec.v1.TransactionTrace.calls:type_name -> sf.ethereum.codec.v1.Call
	17, // 27: sf.ethereum.codec.v1.TransactionTraceWithBlockRef.trace:type_name -> sf.ethereum.codec.v1.TransactionTrace
	12, // 28: sf.ethereum.codec.v1.TransactionTraceWithBlockRef.block_ref:type_name -> sf.ethereum.codec.v1.BlockRef
	20, // 29: sf.ethereum.codec.v1.TransactionReceipt.logs:type_name -> sf.ethereum.codec.v1.Log
	1,  // 30: sf.ethereum.codec.v1.Call.call_type:type_name -> sf.ethereum.codec.v1.CallType
	14, // 31: sf.ethereum.codec.v1.Call.value:type_name -> sf.ethereum.codec.v1.BigInt
	30, // 32: sf.ethereum.codec.v1.Call.keccak_preimages:type_name -> sf.ethereum.codec.v1.Call.KeccakPreimagesEntry
	24, // 33: sf.ethereum.codec.v1.Call.storage_changes:type_name -> sf.ethereum.codec.v1.StorageChange
	25, // 34: sf.ethereum.codec.v1.Call.balance_changes:type_name -> sf.ethereum.codec.v1.BalanceChange
	26, // 35: sf.ethereum.codec.v1.Call.nonce_changes:type_name -> sf.ethereum.codec.v1.NonceChange
	20, // 36: sf.ethereum.codec.v1.Call.logs:type_name -> sf.ethereum.codec.v1.Log
	27, // 37: sf.ethereum.codec.v1.Call.code_changes:type_name -> sf.ethereum.codec.v1.CodeChange
	28, // 38: sf.ethereum.codec.v1.Call.gas_changes:type_name -> sf.ethereum.codec.v1.GasChange
	29, // 39: sf.ethereum.codec.v1.Call.gas_events:type_name -> sf.ethereum.codec.v1.GasEvent
	22, // 40: sf.ethereum.codec.v1.Call.erc20_balance_changes:type_name -> sf.ethereum.codec.v1.ERC20BalanceChange
	23, // 41: sf.ethereum.codec.v1.Call.erc20_transfer_events:type_name -> sf.ethereum.codec.v1.ERC20TransferEvent
	14, // 42: sf.ethereum.codec.v1.ERC20BalanceChange.old_balance:type_name -> sf.ethereum.codec.v1.BigInt
	14, // 43: sf.ethereum.codec.v1.ERC20BalanceChange.new_balance:type_name -> sf.ethereum.codec.v1.BigInt
	14, // 44: sf.ethereum.codec.v1.ERC20TransferEvent.amount:type_name -> sf.ethereum.codec.v1.BigInt
	14, // 45: sf.ethereum.codec.v1.BalanceChange.old_value:type_name -> sf.ethereum.codec.v1.BigInt
	14, // 46: sf.ethereum.codec.v1.BalanceChange.new_value:type_name -> sf.ethereum.codec.v1.BigInt
	4,  // 47: sf.ethereum.codec.v1.BalanceChange.reason:type_name -> sf.ethereum.codec.v1.BalanceChange.Reason
	5,  // 48: sf.ethereum.codec.v1.GasChange.reason:type_name -> sf.ethereum.codec.v1.GasChange.Reason
	6,  // 49: sf.ethereum.codec.v1.GasEvent.id:type_name -> sf.ethereum.codec.v1.GasEvent.Id
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_sf_ethereum_codec_v1_codec_proto_init() }
func file_sf_ethereum_codec_v1_codec_proto_init() {
	if File_sf_ethereum_codec_v1_codec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderOnlyBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockWithRefs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRefs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnclesHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionTraceWithBlockRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20BalanceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20TransferEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_ethereum_codec_v1_codec_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_ethereum_codec_v1_codec_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_ethereum_codec_v1_codec_proto_goTypes,
		DependencyIndexes: file_sf_ethereum_codec_v1_codec_proto_depIdxs,
		EnumInfos:         file_sf_ethereum_codec_v1_codec_proto_enumTypes,
		MessageInfos:      file_sf_ethereum_codec_v1_codec_proto_msgTypes,
	}.Build()
	File_sf_ethereum_codec_v1_codec_proto = out.File
	file_sf_ethereum_codec_v1_codec_proto_rawDesc = nil
	file_sf_ethereum_codec_v1_codec_proto_goTypes = nil
	file_sf_ethereum_codec_v1_codec_proto_depIdxs = nil
}
